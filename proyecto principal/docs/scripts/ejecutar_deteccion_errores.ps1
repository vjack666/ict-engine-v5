#!/usr/bin/env pwsh
<#
üîç ITC ENGINE v5.0 - EJECUTOR SISTEMA DETECCI√ìN DE ERRORES JER√ÅRQUICO
=====================================================================

üéØ OBJETIVO: Script automatizado para ejecutar el Sistema de Detecci√≥n de Errores
            con diferentes modos y opciones de configuraci√≥n

üìä CARACTER√çSTICAS:
   - ‚úÖ Modo r√°pido y completo
   - ‚úÖ Integraci√≥n con dashboard
   - ‚úÖ Generaci√≥n autom√°tica de reportes
   - ‚úÖ Configuraci√≥n flexible
   - ‚úÖ Logging detallado

üöÄ USO:
   .\scripts\ejecutar_deteccion_errores.ps1 [opciones]

   Opciones:
   -Quick         : An√°lisis r√°pido (solo archivos cr√≠ticos)
   -Dashboard     : Modo integraci√≥n dashboard
   -Output <path> : Archivo de salida personalizado
   -Verbose       : Modo verboso
   -Help          : Mostrar ayuda

üìÖ Fecha: 2025-08-06 | Versi√≥n: 1.0.0
üë§ Autor: ITC Engine v5.0 System
#>

param(
    [switch]$Quick,
    [switch]$Dashboard,
    [string]$Output = "",
    [switch]$Verbose,
    [switch]$Help
)

# ===================================================================
# üé® CONFIGURACI√ìN Y VARIABLES GLOBALES
# ===================================================================

$ErrorActionPreference = "Stop"
$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }

# Colores para output
$ColorSuccess = "Green"
$ColorWarning = "Yellow"
$ColorError = "Red"
$ColorInfo = "Cyan"
$ColorHeader = "Magenta"

# Rutas importantes
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$WorkspaceRoot = Split-Path -Parent (Split-Path -Parent $ScriptDir)
$ErrorDetectorScript = Join-Path $ScriptDir "error_detection\error_detector.py"
$LogsDir = Join-Path $WorkspaceRoot "data\logs"
$ExportsDir = Join-Path $WorkspaceRoot "data\exports"

# Configuraci√≥n de timestamps
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = Join-Path $LogsDir "deteccion_errores_$Timestamp.log"

# ===================================================================
# üõ†Ô∏è FUNCIONES AUXILIARES
# ===================================================================

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [string]$Prefix = ""
    )

    $FullMessage = if ($Prefix) { "[$Prefix] $Message" } else { $Message }
    Write-Host $FullMessage -ForegroundColor $Color

    # Tambi√©n escribir al log
    if (Test-Path $LogsDir) {
        "$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss')) - $FullMessage" | Add-Content $LogFile
    }
}

function Show-Header {
    Write-Host ""
    Write-ColorOutput "üîç ITC ENGINE v5.0 - SISTEMA DETECCI√ìN DE ERRORES JER√ÅRQUICO" $ColorHeader
    Write-ColorOutput "=================================================================" $ColorHeader
    Write-ColorOutput "üöÄ Iniciando an√°lisis autom√°tico del sistema..." $ColorInfo
    Write-ColorOutput "üìÖ Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" $ColorInfo
    Write-Host ""
}

function Show-Help {
    Write-Host ""
    Write-ColorOutput "üîç SISTEMA DE DETECCI√ìN DE ERRORES JER√ÅRQUICO - AYUDA" $ColorHeader
    Write-ColorOutput "======================================================" $ColorHeader
    Write-Host ""
    Write-ColorOutput "USO:" $ColorInfo
    Write-ColorOutput "  .\scripts\ejecutar_deteccion_errores.ps1 [opciones]" "White"
    Write-Host ""
    Write-ColorOutput "OPCIONES:" $ColorInfo
    Write-ColorOutput "  -Quick         An√°lisis r√°pido (solo archivos cr√≠ticos)" "White"
    Write-ColorOutput "  -Dashboard     Modo integraci√≥n con dashboard" "White"
    Write-ColorOutput "  -Output <path> Archivo de salida personalizado" "White"
    Write-ColorOutput "  -Verbose       Modo verboso con detalles" "White"
    Write-ColorOutput "  -Help          Mostrar esta ayuda" "White"
    Write-Host ""
    Write-ColorOutput "EJEMPLOS:" $ColorInfo
    Write-ColorOutput "  .\scripts\ejecutar_deteccion_errores.ps1 -Quick" "White"
    Write-ColorOutput "  .\scripts\ejecutar_deteccion_errores.ps1 -Dashboard -Verbose" "White"
    Write-ColorOutput "  .\scripts\ejecutar_deteccion_errores.ps1 -Output 'mi_reporte.json'" "White"
    Write-Host ""
    exit 0
}

function Test-Prerequisites {
    Write-ColorOutput "üîç Verificando prerequisitos..." $ColorInfo

    # Verificar Python
    try {
        $PythonVersion = & python --version 2>&1
        Write-ColorOutput "‚úÖ Python detectado: $PythonVersion" $ColorSuccess
    }
    catch {
        Write-ColorOutput "‚ùå ERROR: Python no encontrado en PATH" $ColorError
        Write-ColorOutput "üí° Instale Python o verifique la configuraci√≥n del PATH" $ColorWarning
        exit 1
    }

    # Verificar script detector
    if (-not (Test-Path $ErrorDetectorScript)) {
        Write-ColorOutput "‚ùå ERROR: Script detector no encontrado" $ColorError
        Write-ColorOutput "üìç Ruta esperada: $ErrorDetectorScript" $ColorWarning
        exit 1
    }

    Write-ColorOutput "‚úÖ Script detector encontrado" $ColorSuccess

    # Verificar/crear directorios
    $DirsToCheck = @($LogsDir, $ExportsDir)
    foreach ($Dir in $DirsToCheck) {
        if (-not (Test-Path $Dir)) {
            New-Item -ItemType Directory -Path $Dir -Force | Out-Null
            Write-ColorOutput "üìÅ Directorio creado: $Dir" $ColorInfo
        }
    }

    Write-ColorOutput "‚úÖ Prerequisitos verificados correctamente" $ColorSuccess
}

function Install-PythonDependencies {
    Write-ColorOutput "üì¶ Verificando dependencias Python..." $ColorInfo

    # Lista de dependencias requeridas
    $RequiredPackages = @("rich")

    foreach ($Package in $RequiredPackages) {
        try {
            & python -c "import $Package" 2>$null
            Write-ColorOutput "‚úÖ Dependencia OK: $Package" $ColorSuccess
        }
        catch {
            Write-ColorOutput "üì¶ Instalando dependencia: $Package" $ColorWarning
            try {
                & python -m pip install $Package --quiet
                Write-ColorOutput "‚úÖ Dependencia instalada: $Package" $ColorSuccess
            }
            catch {
                Write-ColorOutput "‚ö†Ô∏è No se pudo instalar $Package (continuando sin Rich UI)" $ColorWarning
            }
        }
    }
}

function Invoke-ErrorDetection {
    param(
        [bool]$QuickMode = $false,
        [string]$OutputFile = ""
    )

    Write-ColorOutput "üöÄ Ejecutando sistema de detecci√≥n de errores..." $ColorInfo

    # Construir argumentos
    $Arguments = @()
    $Arguments += "--workspace"
    $Arguments += "`"$WorkspaceRoot`""

    if ($QuickMode) {
        $Arguments += "--quick"
        Write-ColorOutput "‚ö° Modo r√°pido activado" $ColorInfo
    }

    if ($OutputFile) {
        $Arguments += "--output"
        $Arguments += "`"$OutputFile`""
        Write-ColorOutput "üìÅ Salida: $OutputFile" $ColorInfo
    }

    Write-ColorOutput "üîß Comando: python `"$ErrorDetectorScript`" $($Arguments -join ' ')" $ColorInfo

    # Ejecutar detector
    try {
        $StartTime = Get-Date

        if ($Verbose) {
            & python $ErrorDetectorScript @Arguments
        } else {
            $DetectionOutput = & python $ErrorDetectorScript @Arguments 2>&1
        }

        $EndTime = Get-Date
        $Duration = ($EndTime - $StartTime).TotalSeconds

        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ An√°lisis completado exitosamente" $ColorSuccess
            Write-ColorOutput "‚è±Ô∏è Tiempo de ejecuci√≥n: $([math]::Round($Duration, 2)) segundos" $ColorInfo
        } elseif ($LASTEXITCODE -eq 1) {
            Write-ColorOutput "‚ö†Ô∏è An√°lisis completado con problemas cr√≠ticos detectados" $ColorWarning
            Write-ColorOutput "üö® Revisar inmediatamente los errores cr√≠ticos" $ColorError
        } else {
            throw "Error en la ejecuci√≥n del detector (c√≥digo: $LASTEXITCODE)"
        }

        if (-not $Verbose -and $DetectionOutput) {
            Write-ColorOutput "üìã Salida del detector:" $ColorInfo
            $DetectionOutput | ForEach-Object { Write-ColorOutput "   $_" "White" }
        }

        return $LASTEXITCODE

    }
    catch {
        Write-ColorOutput "‚ùå ERROR ejecutando detector: $($_.Exception.Message)" $ColorError
        return 2
    }
}

function Show-Summary {
    param(
        [int]$ExitCode,
        [string]$OutputFile = ""
    )

    Write-Host ""
    Write-ColorOutput "üìä RESUMEN DE EJECUCI√ìN" $ColorHeader
    Write-ColorOutput "========================" $ColorHeader

    # Estado del an√°lisis
    switch ($ExitCode) {
        0 {
            Write-ColorOutput "‚úÖ Estado: An√°lisis completado sin problemas cr√≠ticos" $ColorSuccess
        }
        1 {
            Write-ColorOutput "‚ö†Ô∏è Estado: Problemas cr√≠ticos detectados - REVISAR URGENTE" $ColorWarning
        }
        default {
            Write-ColorOutput "‚ùå Estado: Error en la ejecuci√≥n" $ColorError
        }
    }

    # Archivos generados
    Write-ColorOutput "üìÅ Archivos generados:" $ColorInfo
    Write-ColorOutput "   üìÑ Log de ejecuci√≥n: $LogFile" "White"

    if ($OutputFile -and (Test-Path $OutputFile)) {
        Write-ColorOutput "   üìä Reporte JSON: $OutputFile" "White"
    }

    # Bit√°coras autom√°ticas
    $DiagnosticsDir = Join-Path $WorkspaceRoot "docs\bitacoras\diagnosticos"
    if (Test-Path $DiagnosticsDir) {
        $LatestDiagnostic = Get-ChildItem $DiagnosticsDir -Filter "deteccion_errores_*.json" |
                           Sort-Object LastWriteTime -Descending |
                           Select-Object -First 1

        if ($LatestDiagnostic) {
            Write-ColorOutput "   üîç Bit√°cora diagn√≥stica: $($LatestDiagnostic.FullName)" "White"
        }
    }

    Write-Host ""

    # Recomendaciones
    if ($ExitCode -eq 1) {
        Write-ColorOutput "üí° RECOMENDACIONES:" $ColorWarning
        Write-ColorOutput "   üö® Revisar problemas cr√≠ticos inmediatamente" "White"
        Write-ColorOutput "   üìä Abrir dashboard para an√°lisis detallado" "White"
        Write-ColorOutput "   üîß Corregir errores antes de ejecutar en producci√≥n" "White"
    } elseif ($ExitCode -eq 0) {
        Write-ColorOutput "üí° RECOMENDACIONES:" $ColorInfo
        Write-ColorOutput "   ‚ú® Sistema en buen estado" "White"
        Write-ColorOutput "   üìà Considerar ejecutar an√°lisis completo peri√≥dicamente" "White"
        Write-ColorOutput "   üîç Revisar problemas menores cuando sea posible" "White"
    }

    Write-Host ""
}

function Open-DashboardIntegration {
    Write-ColorOutput "üé® Iniciando integraci√≥n con dashboard..." $ColorInfo

    # Buscar archivo del dashboard
    $DashboardScript = Join-Path $WorkspaceRoot "dashboard\dashboard_definitivo.py"

    if (Test-Path $DashboardScript) {
        Write-ColorOutput "üìä Ejecutando dashboard con pesta√±a de problemas..." $ColorInfo
        try {
            # Ejecutar dashboard en background
            Start-Process -FilePath "python" -ArgumentList "`"$DashboardScript`"" -NoNewWindow
            Write-ColorOutput "‚úÖ Dashboard iniciado exitosamente" $ColorSuccess
            Write-ColorOutput "üéØ Buscar pesta√±a 'üö® Problemas' en el dashboard" $ColorInfo
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è No se pudo iniciar dashboard autom√°ticamente" $ColorWarning
            Write-ColorOutput "üí° Ejecute manualmente: python `"$DashboardScript`"" $ColorInfo
        }
    } else {
        Write-ColorOutput "‚ö†Ô∏è Dashboard no encontrado en: $DashboardScript" $ColorWarning
    }
}

# ===================================================================
# üöÄ FUNCI√ìN PRINCIPAL
# ===================================================================

function Main {
    # Mostrar ayuda si se solicita
    if ($Help) {
        Show-Help
    }

    # Mostrar header
    Show-Header

    # Verificar prerequisitos
    Test-Prerequisites

    # Instalar dependencias
    Install-PythonDependencies

    # Configurar archivo de salida
    $FinalOutput = if ($Output) {
        if ([System.IO.Path]::IsPathRooted($Output)) { $Output }
        else { Join-Path $ExportsDir $Output }
    } else {
        Join-Path $ExportsDir "deteccion_errores_$Timestamp.json"
    }

    # Ejecutar detecci√≥n
    $ExitCode = Invoke-ErrorDetection -QuickMode:$Quick -OutputFile $FinalOutput

    # Mostrar resumen
    Show-Summary -ExitCode $ExitCode -OutputFile $FinalOutput

    # Integraci√≥n con dashboard si se solicita
    if ($Dashboard) {
        Open-DashboardIntegration
    }

    Write-ColorOutput "üéØ Ejecuci√≥n completada" $ColorHeader
    return $ExitCode
}

# ===================================================================
# üé¨ EJECUCI√ìN
# ===================================================================

try {
    $FinalExitCode = Main
    exit $FinalExitCode
}
catch {
    Write-ColorOutput "üí• ERROR FATAL: $($_.Exception.Message)" $ColorError
    Write-ColorOutput "üìç En l√≠nea: $($_.InvocationInfo.ScriptLineNumber)" $ColorError

    if ($_.Exception.StackTrace) {
        Write-ColorOutput "üìã Stack trace:" $ColorInfo
        $_.Exception.StackTrace -split "`n" | ForEach-Object {
            Write-ColorOutput "   $_" "Gray"
        }
    }

    exit 99
}
