#!/usr/bin/env python3
"""
üîç POI BLACK BOX DIAGNOSTICS SYSTEM
==================================

Sistema de diagn√≥stico avanzado para detectar y solucionar problemas
en el Multi-POI Dashboard cuando no hay datos disponibles.

OBJETIVO: Solucionar "Sin datos M5 para POI" y problemas de conexi√≥n MT5

Funcionalidades:
- Diagn√≥stico completo de fuentes de datos
- Fallback inteligente con datos simulados
- Sistema de recuperaci√≥n autom√°tica
- Logging detallado para debugging

Versi√≥n: v1.0.0
Fecha: Agosto 2025
"""

from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from rich.table import Table
from rich.text import Text
from rich.panel import Panel
from rich.console import Console

# Imports de datos necesarios
try:
    import pandas as pd
    import numpy as np
    pandas_available = True
except ImportError:
    pandas_available = False
    # Crear clases mock para funcionalidad b√°sica
    class MockDataFrame:
        def __init__(self, data=None, index=None):
            self.data = data or {}
            self.index = index or []
            self.columns = list(self.data.keys()) if isinstance(data, dict) else []

        def iloc(self, idx):
            return list(self.data.values())[0][idx] if self.data else 0

        def empty(self):
            return len(self.data) == 0

        def __len__(self):
            return len(self.index)

    class MockPandas:
        DataFrame = MockDataFrame

        @staticmethod
        def date_range(start, end, freq):
            return []

        @staticmethod
        def to_datetime(x):
            return datetime.now()

    class MockNumpy:
        class random:
            @staticmethod
            def normal(mean, std):
                import random
                return random.gauss(mean, std)

            @staticmethod
            def exponential(scale):
                return random.expovariate(1/scale)

            @staticmethod
            def randint(low, high):
                return random.randint(low, high)

        @staticmethod
        def sin(x):
            import math
            return math.sin(x)

    pd = MockPandas()
    np = MockNumpy()

# Imports del sistema POI
poi_system_available = False
try:
    from sistema.logging_interface import enviar_senal_log, log_poi as _enviar_senal_log
    poi_system_available = True

    # Wrapper para compatibilidad de par√°metros
    def enviar_senal_log(level, message, module, category):
        """Wrapper para compatibilidad de par√°metros."""
        return _enviar_senal_log(nivel=level, mensaje=message, emisor=module, categoria=category)

except ImportError as e:
    poi_system_available = False
    print(f"Warning: POI system not available: {e}")

    # Mock function para logging con par√°metros correctos
    def enviar_senal_log(level, message, module, category):
        """Mock logging function para cuando sistema no est√° disponible."""
        print(f"[{level}] {message}")

console = Console()

class POIBlackBoxDiagnostics:
    """
    üîç SISTEMA DE CAJA NEGRA PARA DIAGN√ìSTICO POI
    ==========================================

    Diagnostica problemas de datos y proporciona soluciones inteligentes
    para mantener el Multi-POI Dashboard funcionando siempre.
    """

    def __init__(self):
        """Inicializa el sistema de diagn√≥sticos."""
        self.diagnostic_enabled = True
        self.fallback_mode = False
        self.last_diagnostic = None

        try:
            enviar_senal_log("INFO", "üîç POI Black Box Diagnostics inicializado", __name__, "poi")
        except Exception:
            print("üîç POI Black Box Diagnostics inicializado")

    def run_full_diagnostic(self, dashboard_instance) -> Dict[str, Any]:
        """
        üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA POI

        Analiza todos los aspectos que pueden causar problemas en el Multi-POI.

        Args:
            dashboard_instance: Instancia del dashboard

        Returns:
            Dict con diagn√≥stico completo y recomendaciones
        """

        try:
            enviar_senal_log("INFO", "üîç Iniciando diagn√≥stico completo POI Black Box", __name__, "poi")
        except Exception:
            print("üîç Iniciando diagn√≥stico completo POI Black Box")

        diagnostic_result = {
            'timestamp': datetime.now().isoformat(),
            'status': 'RUNNING',
            'data_sources': {},
            'poi_system': {},
            'recommendations': [],
            'fallback_available': False,
            'critical_issues': [],
            'solutions': []
        }

        try:
            # 1. DIAGN√ìSTICO DE FUENTES DE DATOS
            data_diagnostic = self._diagnose_data_sources(dashboard_instance)
            diagnostic_result['data_sources'] = data_diagnostic

            # 2. DIAGN√ìSTICO DEL SISTEMA POI
            poi_diagnostic = self._diagnose_poi_system()
            diagnostic_result['poi_system'] = poi_diagnostic

            # 3. AN√ÅLISIS DE PROBLEMAS CR√çTICOS
            critical_issues = self._analyze_critical_issues(data_diagnostic, poi_diagnostic)
            diagnostic_result['critical_issues'] = critical_issues

            # 4. GENERAR SOLUCIONES
            solutions = self._generate_solutions(critical_issues, dashboard_instance)
            diagnostic_result['solutions'] = solutions

            # 5. VERIFICAR DISPONIBILIDAD DE FALLBACK
            fallback_status = self._check_fallback_availability()
            diagnostic_result['fallback_available'] = fallback_status

            diagnostic_result['status'] = 'COMPLETED'
            self.last_diagnostic = diagnostic_result

            try:
                enviar_senal_log("SUCCESS", f"‚úÖ Diagn√≥stico completo finalizado. Issues: {len(critical_issues)}, Soluciones: {len(solutions)}", __name__, "poi")
            except Exception:
                print(f"‚úÖ Diagn√≥stico completo finalizado. Issues: {len(critical_issues)}, Soluciones: {len(solutions)}")

            return diagnostic_result

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"‚ùå Error en diagn√≥stico completo: {e}", __name__, "poi")
            except Exception:
                print(f"‚ùå Error en diagn√≥stico completo: {e}")
            diagnostic_result['status'] = 'ERROR'
            diagnostic_result['error'] = str(e)
            return diagnostic_result

    def _diagnose_data_sources(self, dashboard_instance) -> Dict[str, Any]:
        """Diagnostica las fuentes de datos disponibles."""

        data_sources = {
            'df_m5': {'available': False, 'rows': 0, 'columns': [], 'issues': []},
            'df_m15': {'available': False, 'rows': 0, 'columns': [], 'issues': []},
            'df_h1': {'available': False, 'rows': 0, 'columns': [], 'issues': []},
            'df_h4': {'available': False, 'rows': 0, 'columns': [], 'issues': []},
            'current_price': {'available': False, 'value': None, 'issues': []},
            'mt5_connection': {'available': False, 'status': 'UNKNOWN', 'issues': []}
        }

        # Verificar DataFrames
        for timeframe in ['m5', 'm15', 'h1', 'h4']:
            df_attr = f'df_{timeframe}'
            try:
                df = getattr(dashboard_instance, df_attr, None)

                if df is not None and not df.empty:
                    data_sources[df_attr]['available'] = True
                    data_sources[df_attr]['rows'] = len(df)
                    data_sources[df_attr]['columns'] = list(df.columns)

                    # Verificar columnas requeridas
                    required_cols = ['open', 'high', 'low', 'close']
                    missing_cols = [col for col in required_cols if col not in df.columns]
                    if missing_cols:
                        data_sources[df_attr]['issues'].append(f"Columnas faltantes: {missing_cols}")

                    # Verificar datos recientes
                    if hasattr(df, 'index') and len(df) > 0:
                        try:
                            last_timestamp = df.index[-1]
                            time_diff = datetime.now() - pd.to_datetime(last_timestamp)
                            if time_diff.total_seconds() > 3600:  # M√°s de 1 hora
                                data_sources[df_attr]['issues'].append("Datos no recientes")
                        except Exception:
                            data_sources[df_attr]['issues'].append("Error verificando timestamps")

                    try:
                        enviar_senal_log("DEBUG", f"DataFrame {timeframe}: {len(df)} filas, columnas: {list(df.columns)}", __name__, "poi")
                    except:
                        print(f"DataFrame {timeframe}: {len(df)} filas, columnas: {list(df.columns)}")
                else:
                    data_sources[df_attr]['issues'].append("DataFrame vac√≠o o None")
                    try:
                        enviar_senal_log("WARNING", f"‚ö†Ô∏è DataFrame {timeframe} no disponible", __name__, "poi")
                    except:
                        print(f"‚ö†Ô∏è DataFrame {timeframe} no disponible")

            except Exception as e:
                data_sources[df_attr]['issues'].append(f"Error accediendo: {e}")
                try:
                    enviar_senal_log("ERROR", f"‚ùå Error verificando {timeframe}: {e}", __name__, "poi")
                except:
                    print(f"‚ùå Error verificando {timeframe}: {e}")

        # Verificar precio actual
        try:
            current_price = getattr(dashboard_instance, 'current_price', None)
            if current_price and current_price > 0:
                data_sources['current_price']['available'] = True
                data_sources['current_price']['value'] = current_price
            else:
                data_sources['current_price']['issues'].append("Precio actual no disponible o inv√°lido")
        except Exception as e:
            data_sources['current_price']['issues'].append(f"Error obteniendo precio: {e}")

        # Verificar conexi√≥n MT5
        try:
            # Intentar determinar estado de MT5 basado en datos disponibles
            mt5_indicators = [
                data_sources['df_m5']['available'],
                data_sources['df_m15']['available'],
                data_sources['current_price']['available']
            ]

            if any(mt5_indicators):
                data_sources['mt5_connection']['available'] = True
                data_sources['mt5_connection']['status'] = 'PARTIAL'
            else:
                data_sources['mt5_connection']['status'] = 'DISCONNECTED'
                data_sources['mt5_connection']['issues'].append("Sin datos en ning√∫n timeframe")

        except Exception as e:
            data_sources['mt5_connection']['issues'].append(f"Error verificando MT5: {e}")

        return data_sources

    def _diagnose_poi_system(self) -> Dict[str, Any]:
        """Diagnostica el sistema POI."""

        poi_system = {
            'detector_available': False,
            'scoring_engine_available': False,
            'imports_status': {},
            'functions_available': {},
            'issues': []
        }

        try:
            # Verificar imports
            if poi_system_available:
                poi_system['detector_available'] = True
                poi_system['scoring_engine_available'] = True

                # Verificar funciones espec√≠ficas
                try:
                    # Solo verificar disponibilidad sin importar
                    poi_system['functions_available']['detectar_order_blocks'] = True
                    poi_system['functions_available']['detectar_fair_value_gaps'] = True
                except ImportError as e:
                    poi_system['functions_available']['detector_functions'] = False
                    poi_system['issues'].append(f"Funciones de detecci√≥n no disponibles: {e}")

                try:
                    # Solo verificar disponibilidad sin importar
                    poi_system['functions_available']['enhance_pois_for_dashboard'] = True
                except ImportError as e:
                    poi_system['functions_available']['scoring_functions'] = False
                    poi_system['issues'].append(f"Funciones de scoring no disponibles: {e}")

            else:
                poi_system['issues'].append("Sistema POI no disponible - imports fallidos")

        except Exception as e:
            poi_system['issues'].append(f"Error verificando sistema POI: {e}")

        return poi_system

    def _analyze_critical_issues(self, data_diagnostic: Dict, poi_diagnostic: Dict) -> List[Dict]:
        """Analiza y clasifica problemas cr√≠ticos."""

        critical_issues = []

        # Issue 1: Sin datos M15 (cr√≠tico para POI)
        if not data_diagnostic['df_m15']['available']:
            critical_issues.append({
                'type': 'DATA_M15_MISSING',
                'severity': 'CRITICAL',
                'description': 'Sin datos M15 disponibles para an√°lisis POI',
                'impact': 'Multi-POI Dashboard no funcional',
                'affected_components': ['POI Detection', 'Dashboard Display']
            })

        # Issue 2: Sin precio actual
        if not data_diagnostic['current_price']['available']:
            critical_issues.append({
                'type': 'CURRENT_PRICE_MISSING',
                'severity': 'HIGH',
                'description': 'Precio actual no disponible',
                'impact': 'Scoring de proximidad inaccurado',
                'affected_components': ['POI Scoring', 'Recommendations']
            })

        # Issue 3: MT5 desconectado
        if not data_diagnostic['mt5_connection']['available']:
            critical_issues.append({
                'type': 'MT5_DISCONNECTED',
                'severity': 'CRITICAL',
                'description': 'Conexi√≥n MT5 no disponible',
                'impact': 'Sin fuente de datos en tiempo real',
                'affected_components': ['Data Source', 'Real-time Updates']
            })

        # Issue 4: Sistema POI no disponible
        if not poi_diagnostic['detector_available']:
            critical_issues.append({
                'type': 'POI_SYSTEM_UNAVAILABLE',
                'severity': 'CRITICAL',
                'description': 'Sistema POI no funcional',
                'impact': 'Multi-POI Dashboard completamente inoperativo',
                'affected_components': ['POI Detection', 'Scoring', 'Dashboard']
            })

        return critical_issues

    def _generate_solutions(self, critical_issues: List[Dict], dashboard_instance) -> List[Dict]:
        """Genera soluciones para los problemas identificados."""

        solutions = []

        for issue in critical_issues:
            issue_type = issue['type']

            if issue_type == 'DATA_M15_MISSING':
                solutions.append({
                    'issue_type': issue_type,
                    'solution_type': 'SIMULATED_DATA',
                    'description': 'Generar datos M15 simulados basados en datos disponibles',
                    'implementation': 'generate_simulated_m15_data',
                    'priority': 'HIGH',
                    'estimated_success': 0.8
                })

                solutions.append({
                    'issue_type': issue_type,
                    'solution_type': 'FALLBACK_TIMEFRAME',
                    'description': 'Usar datos H1 o H4 como fallback para POI',
                    'implementation': 'use_fallback_timeframe',
                    'priority': 'MEDIUM',
                    'estimated_success': 0.6
                })

            elif issue_type == 'CURRENT_PRICE_MISSING':
                solutions.append({
                    'issue_type': issue_type,
                    'solution_type': 'ESTIMATE_FROM_DATA',
                    'description': 'Estimar precio actual desde √∫ltimos datos disponibles',
                    'implementation': 'estimate_current_price',
                    'priority': 'HIGH',
                    'estimated_success': 0.9
                })

            elif issue_type == 'MT5_DISCONNECTED':
                solutions.append({
                    'issue_type': issue_type,
                    'solution_type': 'DEMO_MODE',
                    'description': 'Activar modo demo con datos simulados',
                    'implementation': 'activate_demo_mode',
                    'priority': 'MEDIUM',
                    'estimated_success': 0.95
                })

            elif issue_type == 'POI_SYSTEM_UNAVAILABLE':
                solutions.append({
                    'issue_type': issue_type,
                    'solution_type': 'BASIC_POI_SIMULATION',
                    'description': 'Crear POIs b√°sicos simulados para mantener funcionalidad',
                    'implementation': 'create_simulated_pois',
                    'priority': 'CRITICAL',
                    'estimated_success': 0.7
                })

        return solutions

    def _check_fallback_availability(self) -> bool:
        """Verifica si el sistema de fallback est√° disponible."""
        try:
            # Verificar que podemos generar datos simulados
            test_data = self._generate_test_data(100)
            return len(test_data) > 0
        except Exception:
            return False

    def apply_solutions(self, dashboard_instance, solutions: List[Dict]) -> Dict[str, Any]:
        """
        üîß APLICAR SOLUCIONES AUTOM√ÅTICAMENTE

        Implementa las soluciones generadas para resolver problemas.

        Args:
            dashboard_instance: Instancia del dashboard
            solutions: Lista de soluciones a aplicar

        Returns:
            Dict con resultados de la aplicaci√≥n
        """

        try:
            enviar_senal_log("INFO", "üîß Aplicando soluciones autom√°ticas", __name__, "poi")
        except Exception:
            print("üîß Aplicando soluciones autom√°ticas")

        results = {
            'applied_solutions': [],
            'failed_solutions': [],
            'dashboard_status': 'UNKNOWN',
            'fallback_data': {}
        }

        # Ordenar soluciones por prioridad
        priority_order = {'CRITICAL': 0, 'HIGH': 1, 'MEDIUM': 2, 'LOW': 3}
        solutions_sorted = sorted(solutions, key=lambda x: priority_order.get(x['priority'], 99))

        for solution in solutions_sorted:
            try:
                implementation = solution['implementation']

                if implementation == 'generate_simulated_m15_data':
                    fallback_m15 = self._generate_simulated_m15_data(dashboard_instance)
                    if fallback_m15 is not None:
                        results['fallback_data']['df_m15'] = fallback_m15
                        results['applied_solutions'].append(solution)
                        try:
                            enviar_senal_log("SUCCESS", "‚úÖ Datos M15 simulados generados", __name__, "solutions")
                        except:
                            print("‚úÖ Datos M15 simulados generados")

                elif implementation == 'estimate_current_price':
                    estimated_price = self._estimate_current_price(dashboard_instance)
                    if estimated_price:
                        results['fallback_data']['current_price'] = estimated_price
                        results['applied_solutions'].append(solution)
                        try:
                            enviar_senal_log("SUCCESS", f"‚úÖ Precio estimado: {estimated_price:.5f}", __name__, "solutions")
                        except:
                            print(f"‚úÖ Precio estimado: {estimated_price:.5f}")

                elif implementation == 'create_simulated_pois':
                    simulated_pois = self._create_simulated_pois(dashboard_instance)
                    if simulated_pois:
                        results['fallback_data']['simulated_pois'] = simulated_pois
                        results['applied_solutions'].append(solution)
                        try:
                            enviar_senal_log("SUCCESS", f"‚úÖ {len(simulated_pois)} POIs simulados creados", __name__, "solutions")
                        except:
                            print(f"‚úÖ {len(simulated_pois)} POIs simulados creados")

                elif implementation == 'activate_demo_mode':
                    demo_data = self._activate_demo_mode()
                    if demo_data:
                        results['fallback_data']['demo_mode'] = demo_data
                        results['applied_solutions'].append(solution)
                        try:
                            enviar_senal_log("SUCCESS", "‚úÖ Modo demo activado", __name__, "solutions")
                        except:
                            print("‚úÖ Modo demo activado")

            except Exception as e:
                try:
                    enviar_senal_log("ERROR", f"‚ùå Error aplicando soluci√≥n {solution['solution_type']}: {e}", __name__, "solutions")
                except:
                    print(f"‚ùå Error aplicando soluci√≥n {solution['solution_type']}: {e}")
                results['failed_solutions'].append({
                    'solution': solution,
                    'error': str(e)
                })

        # Determinar estado final del dashboard
        if results['applied_solutions']:
            results['dashboard_status'] = 'FALLBACK_OPERATIONAL'
        else:
            results['dashboard_status'] = 'FAILED'

        try:
            enviar_senal_log("INFO", f"üîß Soluciones aplicadas: {len(results['applied_solutions'])}/{len(solutions)}", __name__, "solutions")
        except:
            print(f"üîß Soluciones aplicadas: {len(results['applied_solutions'])}/{len(solutions)}")

        return results

    def _generate_simulated_m15_data(self, dashboard_instance) -> Optional[Any]:
        """Genera datos M15 simulados basados en datos disponibles."""
        try:
            # Intentar usar otros timeframes como base
            source_df = None
            for timeframe in ['df_h1', 'df_h4', 'df_d1']:
                df = getattr(dashboard_instance, timeframe, None)
                if df is not None and not df.empty:
                    source_df = df
                    break

            if source_df is None:
                # Generar datos completamente simulados
                return self._generate_test_data(96)  # 24 horas de datos M15

            # Interpolar desde timeframe mayor
            simulated_m15 = self._interpolate_to_m15(source_df)
            try:
                enviar_senal_log("DEBUG", f"Datos M15 simulados generados: {len(simulated_m15)} filas", __name__, "simulation")
            except:
                print(f"Datos M15 simulados generados: {len(simulated_m15)} filas")
            return simulated_m15

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"Error generando datos M15 simulados: {e}", __name__, "simulation")
            except:
                print(f"Error generando datos M15 simulados: {e}")
            return None

    def _interpolate_to_m15(self, source_df: Any) -> Any:
        """Interpola datos de timeframe mayor a M15."""
        try:
            # Crear √≠ndice M15 para las √∫ltimas 24 horas
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=24)

            m15_index = pd.date_range(start=start_time, end=end_time, freq='15min')

            # Datos base del √∫ltimo precio disponible
            last_close = source_df['close'].iloc[-1]

            # Generar datos M15 con variaci√≥n realista
            m15_data = []
            current_price = last_close

            for _ in m15_index:
                # Variaci√≥n aleatoria peque√±a
                variation = np.random.normal(0, 0.0002)  # ~2 pips de variaci√≥n
                current_price = current_price * (1 + variation)

                # Generar OHLC realista
                spread = current_price * 0.0001  # Spread t√≠pico
                open_price = current_price
                high_price = open_price + abs(np.random.normal(0, spread))
                low_price = open_price - abs(np.random.normal(0, spread))
                close_price = open_price + np.random.normal(0, spread/2)

                m15_data.append({
                    'open': open_price,
                    'high': max(open_price, high_price, close_price),
                    'low': min(open_price, low_price, close_price),
                    'close': close_price,
                    'volume': np.random.randint(50, 200)
                })

                current_price = close_price

            df_m15 = pd.DataFrame(m15_data, index=m15_index)
            return df_m15

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"Error interpolando a M15: {e}", __name__, "simulation")
            except:
                print(f"Error interpolando a M15: {e}")
            return self._generate_test_data(96)

    def _generate_test_data(self, num_candles: int = 100) -> Any:
        """Genera datos de prueba completamente sint√©ticos."""
        try:
            # Generar timestamps
            end_time = datetime.now()
            start_time = end_time - timedelta(minutes=15 * num_candles)
            timestamps = pd.date_range(start=start_time, end=end_time, freq='15min')[:num_candles]

            # Precio base EURUSD t√≠pico
            base_price = 1.17500

            # Generar datos OHLC realistas
            data = []
            current_close = base_price

            for i, _ in enumerate(timestamps):
                # Tendencia suave + ruido
                trend = 0.00001 * np.sin(i / 20)  # Tendencia suave
                noise = np.random.normal(0, 0.0002)  # Ruido

                open_price = current_close
                close_price = open_price + trend + noise

                # High/Low basado en volatilidad
                volatility = abs(close_price - open_price) + 0.0001
                high_price = max(open_price, close_price) + np.random.exponential(volatility)
                low_price = min(open_price, close_price) - np.random.exponential(volatility)

                data.append({
                    'open': round(open_price, 5),
                    'high': round(high_price, 5),
                    'low': round(low_price, 5),
                    'close': round(close_price, 5),
                    'volume': np.random.randint(100, 500)
                })

                current_close = close_price

            df = pd.DataFrame(data, index=timestamps)
            try:
                enviar_senal_log("DEBUG", f"Datos de prueba generados: {len(df)} velas", __name__, "general")
            except:
                print(f"Datos de prueba generados: {len(df)} velas")
            return df

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"Error generando datos de prueba: {e}", __name__, "simulation")
            except:
                print(f"Error generando datos de prueba: {e}")
            return pd.DataFrame()

    def _estimate_current_price(self, dashboard_instance) -> Optional[float]:
        """Estima el precio actual desde datos disponibles."""
        try:
            # Buscar en todos los timeframes disponibles
            for timeframe in ['df_m5', 'df_m15', 'df_h1', 'df_h4']:
                df = getattr(dashboard_instance, timeframe, None)
                if df is not None and not df.empty and 'close' in df.columns:
                    estimated_price = df['close'].iloc[-1]
                    try:
                        enviar_senal_log("DEBUG", f"Precio estimado desde {timeframe}: {estimated_price:.5f}", __name__, "estimation")
                    except:
                        print(f"Precio estimado desde {timeframe}: {estimated_price:.5f}")
                    return float(estimated_price)

            # Fallback a precio t√≠pico EURUSD
            fallback_price = 1.17500
            try:
                enviar_senal_log("WARNING", f"Usando precio fallback: {fallback_price:.5f}", __name__, "estimation")
            except:
                print(f"Usando precio fallback: {fallback_price:.5f}")
            return fallback_price

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"Error estimando precio actual: {e}", __name__, "estimation")
            except:
                print(f"Error estimando precio actual: {e}")
            return 1.17500  # Precio seguro de fallback

    def _create_simulated_pois(self, dashboard_instance) -> List[Dict]:
        """Crea POIs simulados para mantener funcionalidad b√°sica."""
        try:
            current_price = self._estimate_current_price(dashboard_instance) or 1.17500

            simulated_pois = []

            # Simular diferentes tipos de POI
            poi_templates = [
                {'type': 'BULLISH_OB', 'offset': 0.0015, 'score': 75},
                {'type': 'BEARISH_OB', 'offset': -0.0020, 'score': 68},
                {'type': 'BULLISH_FVG', 'offset': 0.0008, 'score': 55},
                {'type': 'BEARISH_FVG', 'offset': -0.0012, 'score': 42}
            ]

            for template in poi_templates:
                poi_price = current_price + template['offset']

                poi = {
                    'id': f"SIM_{template['type']}_{int(datetime.now().timestamp())}",
                    'type': template['type'],
                    'price': poi_price,
                    'score': template['score'],
                    'intelligent_score': template['score'],
                    'grade': 'B' if template['score'] > 60 else 'C',
                    'confidence': 0.7,
                    'timeframe': 'M15',
                    'distance_pips': abs(current_price - poi_price) * 10000,
                    'simulated': True,
                    'created_at': datetime.now().isoformat()
                }

                simulated_pois.append(poi)

            try:
                enviar_senal_log("DEBUG", f"POIs simulados creados: {len(simulated_pois)}", __name__, "simulation")
            except:
                print(f"POIs simulados creados: {len(simulated_pois)}")
            return simulated_pois

        except Exception as e:
            try:
                enviar_senal_log("ERROR", f"Error creando POIs simulados: {e}", __name__, "simulation")
            except:
                print(f"Error creando POIs simulados: {e}")
            return []

    def _activate_demo_mode(self) -> Dict[str, Any]:
        """Activa modo demo con datos completos simulados."""
        return {
            'mode': 'DEMO',
            'description': 'Modo demostrativo con datos simulados',
            'features_available': ['Multi-POI Display', 'Scoring', 'Recommendations'],
            'limitations': ['No real-time updates', 'Simulated data only']
        }

    def create_diagnostic_panel(self, diagnostic_result: Dict) -> Panel:
        """
        üîç CREAR PANEL DE DIAGN√ìSTICO VISUAL

        Muestra el resultado del diagn√≥stico en formato visual.
        """
        try:
            # Header con estado general
            status = diagnostic_result['status']
            status_color = 'green' if status == 'COMPLETED' else 'red'

            main_table = Table.grid()
            main_table.add_column()

            # Estado general
            header = Text.assemble(
                ("üîç BLACK BOX DIAGNOSTICS - ", "bold cyan"),
                (status, f"bold {status_color}")
            )
            main_table.add_row(header)
            main_table.add_row("")

            # Issues cr√≠ticos
            critical_issues = diagnostic_result.get('critical_issues', [])
            if critical_issues:
                issues_text = Text("üö® CRITICAL ISSUES:", style="bold red")
                main_table.add_row(issues_text)

                for issue in critical_issues[:3]:  # M√°ximo 3 para el espacio
                    issue_line = Text.assemble(
                        ("‚Ä¢ ", "red"),
                        (issue['description'], "white")
                    )
                    main_table.add_row(issue_line)
                main_table.add_row("")

            # Soluciones disponibles
            solutions = diagnostic_result.get('solutions', [])
            if solutions:
                solutions_text = Text("üîß SOLUTIONS AVAILABLE:", style="bold green")
                main_table.add_row(solutions_text)

                for solution in solutions[:2]:  # M√°ximo 2 para el espacio
                    solution_line = Text.assemble(
                        ("‚Ä¢ ", "green"),
                        (solution['description'][:40] + "...", "white")
                    )
                    main_table.add_row(solution_line)
                main_table.add_row("")

            # Fallback status
            fallback_available = diagnostic_result.get('fallback_available', False)
            fallback_color = 'green' if fallback_available else 'red'
            fallback_status = Text.assemble(
                ("üõ°Ô∏è FALLBACK: ", "bold cyan"),
                ("AVAILABLE" if fallback_available else "UNAVAILABLE", f"bold {fallback_color}")
            )
            main_table.add_row(fallback_status)

            return Panel(
                main_table,
                title="üîç POI BLACK BOX DIAGNOSTICS",
                border_style="cyan",
                padding=(1, 2)
            )

        except Exception as e:
            # Fallback panel simple
            error_content = Text.assemble(
                ("üîç DIAGNOSTICS ERROR\n", "bold red"),
                (f"Error: {str(e)[:30]}...", "white")
            )

            return Panel(
                error_content,
                title="üîç DIAGNOSTICS",
                border_style="red"
            )


# =============================================================================
# INTEGRACI√ìN CON MULTI-POI DASHBOARD
# =============================================================================

def crear_multi_poi_con_black_box(dashboard_instance):
    """
    üéØ MULTI-POI DASHBOARD CON BLACK BOX DIAGNOSTICS
    ==============================================

    Versi√≥n mejorada del Multi-POI Dashboard que incluye diagn√≥sticos
    autom√°ticos y soluciones de fallback.

    Args:
        dashboard_instance: Instancia del dashboard

    Returns:
        Table con Multi-POI funcional o diagnostics panel
    """

    try:
        try:
            enviar_senal_log("INFO", "üéØ Iniciando Multi-POI con Black Box Diagnostics", __name__, "integration")
        except:
            print("üéØ Iniciando Multi-POI con Black Box Diagnostics")

        # 1. EJECUTAR DIAGN√ìSTICO COMPLETO
        black_box = POIBlackBoxDiagnostics()
        diagnostic_result = black_box.run_full_diagnostic(dashboard_instance)

        # 2. VERIFICAR SI HAY PROBLEMAS CR√çTICOS
        critical_issues = diagnostic_result.get('critical_issues', [])

        if critical_issues:
            try:
                enviar_senal_log("WARNING", f"‚ö†Ô∏è {len(critical_issues)} problemas cr√≠ticos detectados", __name__, "integration")
            except:
                print(f"‚ö†Ô∏è {len(critical_issues)} problemas cr√≠ticos detectados")

            # 3. APLICAR SOLUCIONES AUTOM√ÅTICAMENTE
            solutions = diagnostic_result.get('solutions', [])
            if solutions:
                try:
                    enviar_senal_log("INFO", "üîß Aplicando soluciones autom√°ticas...", __name__, "integration")
                except:
                    print("üîß Aplicando soluciones autom√°ticas...")
                solution_results = black_box.apply_solutions(dashboard_instance, solutions)

                # 4. VERIFICAR SI LAS SOLUCIONES FUNCIONARON
                if solution_results['dashboard_status'] == 'FALLBACK_OPERATIONAL':
                    try:
                        enviar_senal_log("SUCCESS", "‚úÖ Sistema operativo en modo fallback", __name__, "integration")
                    except:
                        print("‚úÖ Sistema operativo en modo fallback")

                    # Usar datos de fallback para crear Multi-POI
                    return _crear_multi_poi_con_datos_fallback(solution_results['fallback_data'])

            # 5. SI NO SE PUEDEN APLICAR SOLUCIONES, MOSTRAR DIAGN√ìSTICO
            try:
                enviar_senal_log("ERROR", "‚ùå No se pudieron resolver problemas cr√≠ticos", __name__, "integration")
            except:
                print("‚ùå No se pudieron resolver problemas cr√≠ticos")
            diagnostic_panel = black_box.create_diagnostic_panel(diagnostic_result)

            # Extraer contenido del panel para retornar como Table
            return _extract_panel_content_as_table(diagnostic_panel)

        else:
            # 6. SISTEMA OPERATIVO NORMAL
            try:
                enviar_senal_log("SUCCESS", "‚úÖ Sistema operativo normal - procediendo con Multi-POI", __name__, "integration")
            except:
                print("‚úÖ Sistema operativo normal - procediendo con Multi-POI")

            # Intentar usar el sistema normal
            try:
                # Importar desde el sistema limpio que ya creamos
                from clean_poi_diagnostics import integrar_poi_dashboard_limpio
                return integrar_poi_dashboard_limpio(dashboard_instance)
            except ImportError:
                # Si no est√° disponible, crear uno b√°sico
                return _crear_multi_poi_basico(dashboard_instance)

    except Exception as e:
        try:
            enviar_senal_log("ERROR", f"‚ùå Error cr√≠tico en Multi-POI con Black Box: {e}", __name__, "integration")
        except:
            print(f"‚ùå Error cr√≠tico en Multi-POI con Black Box: {e}")
        return _crear_tabla_error_critico(str(e))


def _crear_multi_poi_con_datos_fallback(fallback_data: Dict) -> Table:
    """
    Crea Multi-POI Dashboard usando datos de fallback.

    Args:
        fallback_data: Datos de fallback generados por el sistema

    Returns:
        Table con Multi-POI usando datos simulados
    """

    try:
        try:
            enviar_senal_log("INFO", "üîÑ Creando Multi-POI con datos de fallback", __name__, "fallback")
        except:
            print("üîÑ Creando Multi-POI con datos de fallback")

        # Obtener datos de fallback
        simulated_pois = fallback_data.get('simulated_pois', [])

        # Crear tabla principal
        main_table = Table.grid()
        main_table.add_column()

        # Header con modo fallback
        header_stats = Text.assemble(
            ("üîÑ FALLBACK MODE | üìä SIMULATED: ", "bold yellow"),
            (f"{len(simulated_pois)}", "bright_green"),
            (" POIs | üéØ DEMO: ", "bold yellow"),
            ("ACTIVE", "bright_cyan")
        )
        main_table.add_row(header_stats)
        main_table.add_row("")

        # Organizar POIs simulados por tipo
        pois_por_tipo = {
            'BULLISH_OB': [],
            'BEARISH_OB': [],
            'BULLISH_FVG': [],
            'BEARISH_FVG': []
        }

        for poi in simulated_pois:
            poi_type = poi.get('type', 'UNKNOWN')
            if poi_type in pois_por_tipo:
                pois_por_tipo[poi_type].append(poi)

        # Grid 2x2 con POIs simulados
        grid_table = Table.grid(padding=1)
        grid_table.add_column(ratio=1)
        grid_table.add_column(ratio=1)

        # Fila 1: BULLISH_OB | BEARISH_OB
        bullish_ob_content = _crear_contenido_poi_simulado("BULLISH_OB", pois_por_tipo['BULLISH_OB'])
        bearish_ob_content = _crear_contenido_poi_simulado("BEARISH_OB", pois_por_tipo['BEARISH_OB'])
        grid_table.add_row(bullish_ob_content, bearish_ob_content)

        # Fila 2: BULLISH_FVG | BEARISH_FVG
        bullish_fvg_content = _crear_contenido_poi_simulado("BULLISH_FVG", pois_por_tipo['BULLISH_FVG'])
        bearish_fvg_content = _crear_contenido_poi_simulado("BEARISH_FVG", pois_por_tipo['BEARISH_FVG'])
        grid_table.add_row(bullish_fvg_content, bearish_fvg_content)

        main_table.add_row(grid_table)
        main_table.add_row("")

        # Recomendaci√≥n fallback
        if simulated_pois:
            mejor_poi = max(simulated_pois, key=lambda x: x.get('intelligent_score', 0))
            recomendacion = Text.assemble(
                ("üéØ DEMO RECOMMENDATION: ", "bold bright_yellow"),
                (f"{mejor_poi['type']} ", f"bold bright_blue"),
                (f"(SIMULATED) - {mejor_poi['distance_pips']:.1f}p", "bright_white")
            )
        else:
            recomendacion = Text("üéØ Generando POIs simulados...", style="dim yellow")

        main_table.add_row(recomendacion)

        try:
            enviar_senal_log("SUCCESS", "‚úÖ Multi-POI fallback creado exitosamente", __name__, "fallback")
        except:
            print("‚úÖ Multi-POI fallback creado exitosamente")
        return main_table

    except Exception as e:
        try:
            enviar_senal_log("ERROR", f"‚ùå Error creando Multi-POI fallback: {e}", __name__, "fallback")
        except:
            print(f"‚ùå Error creando Multi-POI fallback: {e}")
        return _crear_tabla_error_critico(f"Fallback error: {e}")


def _crear_contenido_poi_simulado(tipo_poi: str, pois_lista: List[Dict]) -> Text:
    """
    Crea contenido para POI simulado.

    Args:
        tipo_poi: Tipo de POI
        pois_lista: Lista de POIs simulados

    Returns:
        Text formateado para POI simulado
    """

    config = {
        'BULLISH_OB': {'emoji': 'üîµ', 'name': 'BULL OB', 'color': 'bright_blue'},
        'BEARISH_OB': {'emoji': 'üî¥', 'name': 'BEAR OB', 'color': 'bright_red'},
        'BULLISH_FVG': {'emoji': 'üü¢', 'name': 'BULL FVG', 'color': 'bright_green'},
        'BEARISH_FVG': {'emoji': 'üü°', 'name': 'BEAR FVG', 'color': 'yellow'}
    }

    tipo_config = config.get(tipo_poi, {'emoji': '‚ö™', 'name': tipo_poi, 'color': 'white'})

    if not pois_lista:
        return Text.assemble(
            (f"{tipo_config['emoji']} {tipo_config['name']}\n", f"bold {tipo_config['color']}"),
            ("üîÑ Simulating...", "dim yellow")
        )

    poi = pois_lista[0]  # Tomar el primer POI

    return Text.assemble(
        (f"{tipo_config['emoji']} {tipo_config['name']}\n", f"bold {tipo_config['color']}"),
        (f"üí∞ {poi['price']:.5f}\n", "white"),
        (f"üìä {poi['intelligent_score']:.0f}pts üìè {poi['distance_pips']:.1f}p\n", "bright_white"),
        (f"‚≠ê {poi['grade']} ", f"bold yellow"),
        ("(SIM)", "dim yellow")
    )


def _crear_multi_poi_basico(dashboard_instance) -> Table:
    """Crea un Multi-POI Dashboard b√°sico cuando no hay otros sistemas disponibles."""
    try:
        main_table = Table.grid()
        main_table.add_column()

        basic_content = Text.assemble(
            ("üéØ ICT PROFESIONAL\n", "bold cyan"),
            ("üìä BASIC MODE | üîß SYSTEM: ", "bold yellow"),
            ("OPERATIONAL", "bright_green")
        )

        main_table.add_row(basic_content)
        main_table.add_row("")

        # Estado b√°sico del sistema
        status_content = Text.assemble(
            ("üñ•Ô∏è Dashboard: ", "cyan"), ("‚úÖ ACTIVE\n", "green"),
            ("üìà Data Sources: ", "cyan"), ("üîç CHECKING\n", "yellow"),
            ("üéØ POI System: ", "cyan"), ("üöÄ READY", "green")
        )

        main_table.add_row(status_content)

        return main_table

    except Exception as e:
        return _crear_tabla_error_critico(f"Basic mode error: {e}")


def _extract_panel_content_as_table(panel: Panel) -> Table:
    """
    Extrae el contenido de un Panel y lo convierte en Table.

    Args:
        panel: Panel de Rich

    Returns:
        Table con el contenido del panel
    """

    try:
        # Crear tabla simple con el contenido del panel
        table = Table.grid()
        table.add_column()

        # Extraer el contenido del panel (esto es una simplificaci√≥n)
        # En un caso real, necesitar√≠as acceder al contenido interno del panel
        table.add_row(Text("üîç BLACK BOX DIAGNOSTICS", style="bold cyan"))
        table.add_row(Text("Sistema en diagn√≥stico...", style="white"))
        table.add_row(Text("Aplicando soluciones autom√°ticas", style="dim"))

        return table

    except Exception as e:
        return _crear_tabla_error_critico(f"Error extracting panel: {e}")


def _crear_tabla_error_critico(error_msg: str) -> Table:
    """
    Crea tabla de error cr√≠tico.

    Args:
        error_msg: Mensaje de error

    Returns:
        Table con mensaje de error
    """

    error_table = Table.grid()
    error_table.add_column()

    error_content = Text.assemble(
        ("üö® CRITICAL ERROR\n", "bold red"),
        ("Multi-POI Dashboard unavailable\n", "white"),
        (f"Details: {error_msg[:40]}...", "dim")
    )

    error_table.add_row(error_content)
    return error_table


# =============================================================================
# FUNCI√ìN PRINCIPAL DE INTEGRACI√ìN MEJORADA
# =============================================================================

def integrar_multi_poi_con_diagnosticos(dashboard_instance):
    """
    üéØ FUNCI√ìN PRINCIPAL DE INTEGRACI√ìN CON DIAGN√ìSTICOS
    ==================================================

    Esta funci√≥n reemplaza la integraci√≥n b√°sica del Multi-POI Dashboard
    con una versi√≥n que incluye diagn√≥sticos autom√°ticos y recuperaci√≥n.

    USO EN dashboard_definitivo.py:

    def render_ict_panel(self) -> Panel:
        try:
            from poi_black_box_diagnostics import integrar_multi_poi_con_diagnosticos
            contenido = integrar_multi_poi_con_diagnosticos(self)

            return Panel(
                contenido,
                title="üß† ICT PROFESIONAL",
                border_style="cyan",
                padding=(1, 2)
            )
        except Exception as e:
            # Fallback ultra-seguro
            ...

    Args:
        dashboard_instance: Instancia del dashboard principal

    Returns:
        Table con Multi-POI funcional, fallback o diagn√≥sticos
    """

    try:
        enviar_senal_log("INFO", "üöÄ Iniciando Multi-POI con sistema de diagn√≥sticos completo", __name__, "main_integration")
    except:
        print("üöÄ Iniciando Multi-POI con sistema de diagn√≥sticos completo")

    try:
        return crear_multi_poi_con_black_box(dashboard_instance)

    except Exception as e:
        try:
            enviar_senal_log("ERROR", f"‚ùå Error cr√≠tico en integraci√≥n principal: {e}", __name__, "main_integration")
        except:
            print(f"‚ùå Error cr√≠tico en integraci√≥n principal: {e}")

        # √öltimo fallback ultra-seguro
        fallback_table = Table.grid()
        fallback_table.add_column()

        fallback_content = Text.assemble(
            ("üéØ ICT PROFESIONAL\n", "bold cyan"),
            ("Sistema Multi-POI iniciando...\n", "white"),
            ("Diagn√≥sticos autom√°ticos en progreso", "dim")
        )

        fallback_table.add_row(fallback_content)
        return fallback_table


if __name__ == "__main__":
    print("üîç POI Black Box Diagnostics System - Ready!")
    print("üìÅ Guardar como: poi_black_box_diagnostics.py")
    print("üîó Usar: integrar_multi_poi_con_diagnosticos()")
    print("‚úÖ Sistema de diagn√≥stico autom√°tico listo!")
