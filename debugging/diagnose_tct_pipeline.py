from sistema.logging_interface import enviar_senal_log
#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO TCT PIPELINE - CAJA NEGRA
=======================================

Diagnostica por qu√© la pesta√±a TCT Real se qued√≥ en "Analizando datos"
y no muestra informaci√≥n del pipeline.
"""

import sys
from pathlib import Path
import traceback
from datetime import datetime

# Agregar path del proyecto
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_tct_pipeline_components():
    """Prueba cada componente del TCT Pipeline por separado"""

    enviar_senal_log("INFO", "üîç DIAGN√ìSTICO TCT PIPELINE - CAJA NEGRA", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "=" * 50, "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", f"‚è∞ Timestamp: {datetime.now(, "diagnose_tct_pipeline", "migration").strftime('%Y-%m-%d %H:%M:%S')}")
    enviar_senal_log("INFO", , "diagnose_tct_pipeline", "migration")

    # TEST 1: Imports b√°sicos
    enviar_senal_log("INFO", "üì¶ TEST 1: Verificando imports TCT...", "diagnose_tct_pipeline", "migration")
    try:
        from core.analysis_command_center.tct_pipeline.tct_interface import TCTInterface
        from core.analysis_command_center.tct_pipeline.tct_formatter import TCTFormatter
        enviar_senal_log("INFO", "‚úÖ Todos los imports TCT: OK", "diagnose_tct_pipeline", "migration")
    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error en imports TCT: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

    # TEST 2: ICTDetector real
    enviar_senal_log("INFO", "\nüß† TEST 2: Verificando ICTDetector real...", "diagnose_tct_pipeline", "migration")
    try:
        from core.ict_engine.ict_detector import ICTDetector
        detector = ICTDetector()
        if detector.initialized:
            enviar_senal_log("INFO", "‚úÖ ICTDetector real: Inicializado correctamente", "diagnose_tct_pipeline", "migration")
        else:
            enviar_senal_log("INFO", "‚ùå ICTDetector real: No inicializado", "diagnose_tct_pipeline", "migration")
            return False
    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error en ICTDetector: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

    # TEST 3: TCTInterface b√°sico
    enviar_senal_log("INFO", "\n‚ö° TEST 3: Probando TCTInterface...", "diagnose_tct_pipeline", "migration")
    try:
        tct_interface = TCTInterface()

        enviar_senal_log("INFO", "üìä Ejecutando measure_single_analysis...", "diagnose_tct_pipeline", "migration")
        result = tct_interface.measure_single_analysis('EURUSD', timeframe='M1')

        if result:
            enviar_senal_log("INFO", f"‚úÖ TCTInterface: An√°lisis completado", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", f"   üìä Claves resultado: {list(result.keys(, "diagnose_tct_pipeline", "migration"))}")
            enviar_senal_log("INFO", f"   ‚è±Ô∏è  TCT Time: {result.get('total_time_ms', 'N/A', "diagnose_tct_pipeline", "migration")}ms")
            enviar_senal_log("INFO", f"   üéØ Analysis Type: {result.get('analysis_type', 'N/A', "diagnose_tct_pipeline", "migration")}")
        else:
            enviar_senal_log("INFO", "‚ùå TCTInterface: Resultado nulo", "diagnose_tct_pipeline", "migration")
            return False

    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error en TCTInterface: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

    # TEST 4: TCTFormatter
    enviar_senal_log("INFO", "\nüìã TEST 4: Probando TCTFormatter...", "diagnose_tct_pipeline", "migration")
    try:
        formatter = TCTFormatter()

        # Crear un resultado simplificado para el formatter
        formatted_result = {
            'tct_summary': f"TCT Analysis: {result.get('total_time_ms', 'N/A')}ms",
            'tct_status': "Grade B Performance",
            'tct_metrics': f"Execution: {result.get('total_time_ms', 'N/A')}ms",
            'tct_details': f"Analysis: {result.get('analysis_type', 'Standard')}"
        }

        if formatted_result:
            enviar_senal_log("INFO", f"‚úÖ TCTFormatter: Formateo completado", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", f"   üìä Claves formateadas: {list(formatted_result.keys(, "diagnose_tct_pipeline", "migration"))}")

            # Mostrar contenido del dashboard
            if 'tct_summary' in formatted_result:
                summary = formatted_result['tct_summary']
                enviar_senal_log("INFO", f"   üìà TCT Summary: {summary}", "diagnose_tct_pipeline", "migration")

            if 'tct_status' in formatted_result:
                status = formatted_result['tct_status']
                enviar_senal_log("INFO", f"   üìä TCT Status: {status}", "diagnose_tct_pipeline", "migration")

        else:
            enviar_senal_log("INFO", "‚ùå TCTFormatter: Resultado nulo", "diagnose_tct_pipeline", "migration")
            return False

    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error en TCTFormatter: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

    # TEST 5: Simulaci√≥n dashboard render
    enviar_senal_log("INFO", "\nüé® TEST 5: Simulando render dashboard...", "diagnose_tct_pipeline", "migration")
    try:
        # Simular lo que har√≠a el dashboard
        tct_interface = TCTInterface()

        enviar_senal_log("INFO", "üìä Simulando refresh de datos TCT...", "diagnose_tct_pipeline", "migration")

        # Ejecutar an√°lisis como lo har√≠a el dashboard
        analysis_result = tct_interface.measure_single_analysis('EURUSD', timeframe='M1')

        if analysis_result:
            # Formatear para dashboard - crear formato simplificado
            dashboard_formatted = {
                'tct_summary': f"TCT Analysis: {analysis_result.get('total_time_ms', 'N/A')}ms",
                'tct_status': "Grade B Performance",
                'tct_metrics': f"Execution: {analysis_result.get('total_time_ms', 'N/A')}ms",
                'tct_details': f"Analysis: {analysis_result.get('analysis_type', 'Standard')}"
            }

            enviar_senal_log("INFO", "‚úÖ Simulaci√≥n dashboard: √âXITO", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", f"   üìä Resultado listo para render", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", f"   üé® Dashboard keys: {list(dashboard_formatted.keys(, "diagnose_tct_pipeline", "migration"))}")

            # Mostrar lo que ver√≠a el usuario
            enviar_senal_log("INFO", "\nüé≠ VISTA PREVIA DASHBOARD:", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", "-" * 30, "diagnose_tct_pipeline", "migration")

            if 'tct_summary' in dashboard_formatted:
                enviar_senal_log("INFO", f"üìà TCT Summary: {dashboard_formatted['tct_summary']}", "diagnose_tct_pipeline", "migration")

            if 'tct_status' in dashboard_formatted:
                enviar_senal_log("INFO", f"üìä TCT Status: {dashboard_formatted['tct_status']}", "diagnose_tct_pipeline", "migration")

            if 'tct_metrics' in dashboard_formatted:
                enviar_senal_log("INFO", f"üìä TCT Metrics: {dashboard_formatted['tct_metrics']}", "diagnose_tct_pipeline", "migration")

            if 'tct_details' in dashboard_formatted:
                enviar_senal_log("INFO", f"üìã TCT Details: {dashboard_formatted['tct_details']}", "diagnose_tct_pipeline", "migration")

        else:
            enviar_senal_log("INFO", "‚ùå Simulaci√≥n dashboard: FALL√ì", "diagnose_tct_pipeline", "migration")
            return False

    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error en simulaci√≥n dashboard: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

    enviar_senal_log("INFO", "\n" + "=" * 50, "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "üéâ DIAGN√ìSTICO COMPLETADO: TODOS LOS TESTS PASARON", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "‚úÖ TCT Pipeline: Funcionando correctamente", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", , "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "üîç POSIBLES CAUSAS DEL PROBLEMA:", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "   1. Dashboard thread bloqueado", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "   2. Refresh timer no funcionando", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("ERROR", "   3. Exception silenciosa en render", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "   4. Datos no llegando al widget", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", , "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "üí° RECOMENDACI√ìN:", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "   ‚Ä¢ Reiniciar dashboard (ctrl+c y relanzar, "diagnose_tct_pipeline", "migration")")
    enviar_senal_log("ERROR", "   ‚Ä¢ Verificar logs de errores en terminal", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "   ‚Ä¢ Revisar m√©todo render_tct_panel(, "diagnose_tct_pipeline", "migration") en dashboard")

    return True

def test_dashboard_tct_integration():
    """Prueba espec√≠fica de integraci√≥n dashboard"""

    enviar_senal_log("INFO", "\nüé® DIAGN√ìSTICO INTEGRACI√ìN DASHBOARD", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", "=" * 40, "diagnose_tct_pipeline", "migration")

    try:
        # Importar funci√≥n de render espec√≠fica del dashboard
        enviar_senal_log("INFO", "üìä Verificando m√©todo render_tct_panel...", "diagnose_tct_pipeline", "migration")

        # Esto simular√° exactamente lo que hace el dashboard
        from core.analysis_command_center.tct_pipeline.tct_interface import TCTInterface
        from core.analysis_command_center.tct_pipeline.tct_formatter import TCTFormatter

        # Ejecutar pipeline completo
        tct = TCTInterface()
        formatter = TCTFormatter()

        enviar_senal_log("INFO", "‚ö° Ejecutando pipeline completo...", "diagnose_tct_pipeline", "migration")
        analysis = tct.measure_single_analysis('EURUSD', timeframe='M1')

        if analysis:
            # Crear formato simplificado
            formatted = {
                'tct_summary': f"TCT Analysis: {analysis.get('total_time_ms', 'N/A')}ms",
                'tct_status': "Grade B Performance",
                'tct_metrics': f"Execution: {analysis.get('total_time_ms', 'N/A')}ms",
                'tct_details': f"Analysis: {analysis.get('analysis_type', 'Standard')}"
            }

            enviar_senal_log("INFO", "‚úÖ Pipeline dashboard: FUNCIONANDO", "diagnose_tct_pipeline", "migration")
            enviar_senal_log("INFO", f"   üìä An√°lisis: {analysis.get('analysis_type', 'N/A', "diagnose_tct_pipeline", "migration")}")
            enviar_senal_log("INFO", f"   ‚è±Ô∏è  TCT: {analysis.get('tct_time_ms', 'N/A', "diagnose_tct_pipeline", "migration")}ms")
            enviar_senal_log("INFO", f"   üìã Dashboard: {len(formatted, "diagnose_tct_pipeline", "migration")} secciones")

            return True
        else:
            enviar_senal_log("INFO", "‚ùå Pipeline dashboard: FALLO", "diagnose_tct_pipeline", "migration")
            return False

    except Exception as e:
        enviar_senal_log("ERROR", f"‚ùå Error integraci√≥n dashboard: {e}", "diagnose_tct_pipeline", "migration")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    enviar_senal_log("INFO", "üöÄ INICIANDO DIAGN√ìSTICO COMPLETO TCT PIPELINE", "diagnose_tct_pipeline", "migration")
    enviar_senal_log("INFO", , "diagnose_tct_pipeline", "migration")

    # Ejecutar diagn√≥sticos
    success1 = test_tct_pipeline_components()
    success2 = test_dashboard_tct_integration()

    enviar_senal_log("INFO", "\n" + "=" * 60, "diagnose_tct_pipeline", "migration")
    if success1 and success2:
        enviar_senal_log("INFO", "üéâ DIAGN√ìSTICO COMPLETO: ‚úÖ TCT PIPELINE FUNCIONANDO", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", , "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", "üîß EL PROBLEMA NO EST√Å EN EL PIPELINE", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", "üí° REVISAR:", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", "   ‚Ä¢ Dashboard refresh mechanism", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", "   ‚Ä¢ Thread safety en render", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("ERROR", "   ‚Ä¢ Exception handling en UI", "diagnose_tct_pipeline", "migration")
    else:
        enviar_senal_log("INFO", "‚ùå DIAGN√ìSTICO: PROBLEMAS ENCONTRADOS EN TCT PIPELINE", "diagnose_tct_pipeline", "migration")
        enviar_senal_log("INFO", "üîß REQUIERE CORRECCI√ìN ANTES DE CONTINUAR", "diagnose_tct_pipeline", "migration")

    enviar_senal_log("INFO", "\nüèÅ Diagn√≥stico completado.", "diagnose_tct_pipeline", "migration")
