#!/usr/bin/env python3
"""
üîç AUDITOR√çA COMPLETA - ADVANCED CANDLE DOWNLOADER
===============================================

Script que analiza la estructura, dependencias, m√©todos y capacidades
del Advanced Candle Downloader para planificar la integraci√≥n completa.

Fecha: 02 Agosto 2025
Objetivo: Preparaci√≥n para integraci√≥n con dashboard y sistemas
"""

import sys
import inspect
import importlib.util
from pathlib import Path
from typing import Dict, List, Any
import ast

def analyze_advanced_candle_downloader():
    """An√°lisis completo del Advanced Candle Downloader"""

    print("üîç === AUDITOR√çA ADVANCED CANDLE DOWNLOADER ===")
    print()

    # 1. AN√ÅLISIS DE ESTRUCTURA DE ARCHIVO
    print("üìÅ 1. ESTRUCTURA DE ARCHIVO:")
    print("-" * 40)

    downloader_path = Path("utils/advanced_candle_downloader.py")
    if not downloader_path.exists():
        print("‚ùå Error: Archivo no encontrado")
        return

    # Leer contenido del archivo
    with open(downloader_path, 'r', encoding='utf-8') as f:
        content = f.read()
        lines = content.split('\n')

    print(f"üìä Total l√≠neas: {len(lines)}")
    print(f"üìä Tama√±o archivo: {len(content)} caracteres")

    # 2. AN√ÅLISIS DE IMPORTS Y DEPENDENCIAS
    print("\nüì¶ 2. IMPORTS Y DEPENDENCIAS:")
    print("-" * 40)

    imports = []
    for line in lines:
        line = line.strip()
        if line.startswith('import ') or line.startswith('from '):
            imports.append(line)

    print(f"üìä Total imports: {len(imports)}")
    for imp in imports[:10]:  # Mostrar primeros 10
        print(f"   ‚Ä¢ {imp}")
    if len(imports) > 10:
        print(f"   ... y {len(imports) - 10} m√°s")

    # 3. AN√ÅLISIS DE CONFIGURACIONES
    print("\n‚öôÔ∏è 3. CONFIGURACIONES DETECTADAS:")
    print("-" * 40)

    configs = []
    for i, line in enumerate(lines):
        if '_CONFIG' in line and '=' in line:
            configs.append((i+1, line.strip()))

    for line_num, config in configs:
        print(f"   L√≠nea {line_num}: {config}")

    # 4. AN√ÅLISIS DE CLASES Y M√âTODOS
    print("\nüèóÔ∏è 4. CLASES Y M√âTODOS:")
    print("-" * 40)

    try:
        # Importar el m√≥dulo din√°micamente
        sys.path.insert(0, str(Path.cwd()))
        from utils.advanced_candle_downloader import AdvancedCandleDownloader

        # Analizar la clase principal
        class_methods = inspect.getmembers(AdvancedCandleDownloader, predicate=inspect.isfunction)

        print(f"üìä Clase principal: AdvancedCandleDownloader")
        print(f"üìä Total m√©todos: {len(class_methods)}")

        # Categorizar m√©todos
        public_methods = [name for name, _ in class_methods if not name.startswith('_')]
        private_methods = [name for name, _ in class_methods if name.startswith('_')]

        print(f"\nüîì M√âTODOS P√öBLICOS ({len(public_methods)}):")
        for method in public_methods:
            print(f"   ‚Ä¢ {method}")

        print(f"\nüîí M√âTODOS PRIVADOS ({len(private_methods)}):")
        for method in private_methods[:8]:  # Mostrar primeros 8
            print(f"   ‚Ä¢ {method}")
        if len(private_methods) > 8:
            print(f"   ... y {len(private_methods) - 8} m√°s")

    except Exception as e:
        print(f"‚ùå Error analizando clases: {e}")

    # 5. AN√ÅLISIS DE FUNCIONES DE CONVENIENCIA
    print("\nüõ†Ô∏è 5. FUNCIONES DE CONVENIENCIA:")
    print("-" * 40)

    try:
        import utils.advanced_candle_downloader as downloader_module

        # Obtener todas las funciones del m√≥dulo
        functions = inspect.getmembers(downloader_module, predicate=inspect.isfunction)
        module_functions = [name for name, _ in functions if not name.startswith('_')]

        print(f"üìä Total funciones del m√≥dulo: {len(module_functions)}")
        for func in module_functions:
            print(f"   ‚Ä¢ {func}")

    except Exception as e:
        print(f"‚ùå Error analizando funciones: {e}")

    # 6. AN√ÅLISIS DE CAPACIDADES DE DATOS
    print("\nüìä 6. CAPACIDADES DE DATOS:")
    print("-" * 40)

    try:
        from utils.advanced_candle_downloader import DOWNLOAD_CONFIG, TIMEFRAME_MAPPING

        print("üéØ S√çMBOLOS SOPORTADOS:")
        for i, symbol in enumerate(DOWNLOAD_CONFIG["symbols"], 1):
            print(f"   {i}. {symbol}")

        print("\n‚è∞ TIMEFRAMES SOPORTADOS:")
        for tf, code in TIMEFRAME_MAPPING.items():
            print(f"   ‚Ä¢ {tf} (MT5: {code})")

        print(f"\n‚öôÔ∏è CONFIGURACI√ìN:")
        print(f"   ‚Ä¢ Velas por defecto: {DOWNLOAD_CONFIG['default_lookback']:,}")
        print(f"   ‚Ä¢ Chunk size: {DOWNLOAD_CONFIG['chunk_size']:,}")
        print(f"   ‚Ä¢ Descargas paralelas: {DOWNLOAD_CONFIG['parallel_downloads']}")
        print(f"   ‚Ä¢ Verificar integridad: {DOWNLOAD_CONFIG['verify_data_integrity']}")
        print(f"   ‚Ä¢ Backup autom√°tico: {DOWNLOAD_CONFIG['backup_existing_data']}")

    except Exception as e:
        print(f"‚ùå Error analizando configuraciones: {e}")

    # 7. AN√ÅLISIS DE INTEGRACI√ìN ACTUAL
    print("\nüîó 7. INTEGRACI√ìN ACTUAL:")
    print("-" * 40)

    integration_points = [
        "get_mt5_manager()",
        "enviar_senal_log()",
        "sistema.logging_interface",
        "utils.mt5_data_manager"
    ]

    for point in integration_points:
        if point in content:
            print(f"   ‚úÖ {point} - CONECTADO")
        else:
            print(f"   ‚ùå {point} - NO ENCONTRADO")

    # 8. AN√ÅLISIS DE FORMATOS DE SALIDA
    print("\nüíæ 8. FORMATOS DE SALIDA:")
    print("-" * 40)

    output_formats = []
    if "save_data_to_csv" in content:
        output_formats.append("CSV")
    if "json.dump" in content:
        output_formats.append("JSON")
    if "to_csv" in content:
        output_formats.append("Pandas CSV")

    for fmt in output_formats:
        print(f"   ‚úÖ {fmt}")

    # 9. RECOMENDACIONES PARA INTEGRACI√ìN
    print("\nüí° 9. RECOMENDACIONES PARA INTEGRACI√ìN:")
    print("-" * 40)

    recommendations = [
        "Usar download_multiple() para descarga optimizada",
        "Aprovechar validaci√≥n de integridad (_validate_data_integrity)",
        "Utilizar sistema de backup autom√°tico",
        "Implementar callbacks en descargas paralelas",
        "Usar DownloadStats para monitoreo en tiempo real",
        "Aprovechar formato CSV existente para distribuci√≥n",
        "Integrar con sistema de logging SLUC v2.1 existente"
    ]

    for i, rec in enumerate(recommendations, 1):
        print(f"   {i}. {rec}")

    print("\nüéØ PR√ìXIMOS PASOS RECOMENDADOS:")
    print("-" * 40)
    print("1. Crear CandleCoordinator que use AdvancedCandleDownloader")
    print("2. Implementar sistema de callbacks para tiempo real")
    print("3. Integrar con dashboard usando download_multiple()")
    print("4. Aprovechar validaci√≥n y backup existentes")
    print("5. Usar DownloadStats para m√©tricas de rendimiento")

if __name__ == "__main__":
    analyze_advanced_candle_downloader()
