#!/usr/bin/env python3
"""
üîç ITC ENGINE v5.0 - SISTEMA DE DETECCI√ìN DE ERRORES JER√ÅRQUICO
===============================================================

üéØ OBJETIVO: Detectar autom√°ticamente errores, problemas de calidad y riesgos
            en todo el pipeline ITC Engine con clasificaci√≥n jer√°rquica

üìä CARACTER√çSTICAS:
   - ‚úÖ Detecci√≥n AST (sintaxis)
   - ‚úÖ Validaci√≥n de imports y dependencias
   - ‚úÖ An√°lisis de riesgos de runtime
   - ‚úÖ Calidad de c√≥digo especializada
   - ‚úÖ Detecci√≥n de dependencias circulares

üìã CLASIFICACI√ìN JER√ÅRQUICA:
   - Severidad: CRITICAL ‚Üí HIGH ‚Üí MEDIUM ‚Üí LOW ‚Üí INFO
   - Categor√≠a: SISTEMA, TRADING, ICT_ENGINE, POI_SYSTEM, DASHBOARD
   - Especializaci√≥n: Trading Engine, ICT Analysis, POI System

üé® INTEGRACI√ìN:
   - Dashboard con pesta√±a "üö® Problemas"
   - Bit√°coras autom√°ticas en docs/bitacoras/diagnosticos/
   - M√©tricas y estad√≠sticas completas

üìÖ Fecha: 2025-08-06 | Versi√≥n: 1.0.0
üë§ Autor: ITC Engine v5.0 System
"""

# MIGRACI√ìN SIC v3.0 + SLUC v2.1
from sistema.sic import enviar_senal_log, log_info, log_warning

import ast
from sistema.sic import os
from sistema.sic import sys
from sistema.sic import json
import time
import importlib.util
from sistema.sic import Path
from sistema.sic import Dict, List, Tuple, Any, Optional, Set
from sistema.sic import datetime
from sistema.sic import dataclass, asdict
from enum import Enum
from sistema.sic import re
import traceback

# Rich para UI mejorada
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.tree import Tree
    from rich.table import Table
    from rich.progress import track
    from rich import print as rprint
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False
    rprint = print


class Severity(Enum):
    """Niveles de severidad de problemas detectados"""
    CRITICAL = "üö® CRITICAL"
    HIGH = "‚ö†Ô∏è HIGH"
    MEDIUM = "‚ö° MEDIUM"
    LOW = "üìù LOW"
    INFO = "‚ÑπÔ∏è INFO"


class Category(Enum):
    """Categor√≠as especializadas del sistema"""
    SISTEMA = "üîß SISTEMA"
    TRADING = "üíπ TRADING"
    ICT_ENGINE = "‚öôÔ∏è ICT_ENGINE"
    POI_SYSTEM = "üìç POI_SYSTEM"
    DASHBOARD = "üìä DASHBOARD"
    UTILITIES = "üõ†Ô∏è UTILITIES"
    UNKNOWN = "‚ùì UNKNOWN"


@dataclass
class DetectedProblem:
    """Estructura de problema detectado"""
    id: str
    timestamp: str
    file_path: str
    line_number: int
    severity: str
    category: str
    problem_type: str
    title: str
    description: str
    suggestion: str
    code_snippet: str = ""
    context: Dict[str, Any] = None

    def to_dict(self) -> Dict:
        return asdict(self)


class ErrorDetector:
    """üîç Motor Principal de Detecci√≥n de Errores Jer√°rquico"""

    def __init__(self, workspace_root: str):
        self.workspace_root = Path(workspace_root)
        self.console = Console() if RICH_AVAILABLE else None
        self.problems: List[DetectedProblem] = []
        self.stats = {
            'files_analyzed': 0,
            'problems_found': 0,
            'by_severity': {severity.name: 0 for severity in Severity},
            'by_category': {category.name: 0 for category in Category},
            'analysis_time': 0.0
        }

        # Directorios a analizar
        self.analyze_dirs = [
            'core', 'dashboard', 'sistema', 'scripts',
            'utilities', 'utils', 'config', 'teste'
        ]

        # Archivos principales cr√≠ticos
        self.critical_files = [
            'main.py', 'launch_dashboard.py', 'auto_start.py'
        ]

    def analyze_full_system(self, quick_mode: bool = False) -> Dict[str, Any]:
        """üöÄ An√°lisis completo del sistema"""
        start_time = time.time()

        if self.console:
            self.console.print("\nüîç INICIANDO AN√ÅLISIS SISTEMA DE DETECCI√ìN DE ERRORES")
            self.console.print("=" * 60)

        # 1. An√°lisis de archivos cr√≠ticos
        self._analyze_critical_files()

        if not quick_mode:
            # 2. An√°lisis por directorios
            for directory in self.analyze_dirs:
                self._analyze_directory(directory)

            # 3. An√°lisis de dependencias circulares
            self._detect_circular_dependencies()

            # 4. An√°lisis de calidad de c√≥digo
            self._analyze_code_quality()

        # 5. An√°lisis de configuraci√≥n
        self._analyze_configuration()

        self.stats['analysis_time'] = time.time() - start_time

        # 6. Generar reporte
        report = self._generate_report()

        # 7. Guardar bit√°cora
        self._save_diagnostics_log()

        return report

    def _analyze_critical_files(self):
        """üìç An√°lisis de archivos cr√≠ticos del sistema"""
        if self.console:
            self.console.print("\nüìç Analizando archivos cr√≠ticos...")

        for file_name in self.critical_files:
            file_path = self.workspace_root / file_name
            if file_path.exists():
                self._analyze_python_file(file_path, is_critical=True)

    def _analyze_directory(self, directory: str):
        """üìÇ An√°lisis recursivo de directorio"""
        dir_path = self.workspace_root / directory
        if not dir_path.exists():
            return

        if self.console:
            self.console.print(f"üìÇ Analizando directorio: {directory}")

        python_files = list(dir_path.rglob("*.py"))

        if RICH_AVAILABLE and python_files:
            for file_path in track(python_files, description=f"Analizando {directory}..."):
                self._analyze_python_file(file_path)
        else:
            for file_path in python_files:
                self._analyze_python_file(file_path)

    def _analyze_python_file(self, file_path: Path, is_critical: bool = False):
        """üêç An√°lisis espec√≠fico de archivo Python"""
        try:
            self.stats['files_analyzed'] += 1

            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # 1. An√°lisis de sintaxis AST
            self._check_syntax(file_path, content, is_critical)

            # 2. An√°lisis de imports
            self._check_imports(file_path, content, is_critical)

            # 3. An√°lisis de c√≥digo espec√≠fico
            self._check_specific_code_issues(file_path, content, is_critical)

            # 4. An√°lisis de estructura
            self._check_file_structure(file_path, content, is_critical)

        except Exception as e:
            self._add_problem(
                file_path=str(file_path),
                line_number=1,
                severity=Severity.HIGH if is_critical else Severity.MEDIUM,
                category=self._categorize_file(file_path),
                problem_type="FILE_ACCESS_ERROR",
                title="Error accediendo al archivo",
                description=f"No se pudo analizar el archivo: {str(e)}",
                suggestion="Verificar permisos y encoding del archivo"
            )

    def _check_syntax(self, file_path: Path, content: str, is_critical: bool):
        """üîç Verificaci√≥n de sintaxis usando AST"""
        try:
            ast.parse(content)
        except SyntaxError as e:
            self._add_problem(
                file_path=str(file_path),
                line_number=e.lineno or 1,
                severity=Severity.CRITICAL if is_critical else Severity.HIGH,
                category=self._categorize_file(file_path),
                problem_type="SYNTAX_ERROR",
                title="Error de sintaxis",
                description=f"Error de sintaxis en l√≠nea {e.lineno}: {e.msg}",
                suggestion="Corregir la sintaxis del c√≥digo",
                code_snippet=self._get_code_snippet(content, e.lineno or 1)
            )
        except Exception as e:
            self._add_problem(
                file_path=str(file_path),
                line_number=1,
                severity=Severity.MEDIUM,
                category=self._categorize_file(file_path),
                problem_type="AST_PARSE_ERROR",
                title="Error al parsear AST",
                description=f"No se pudo parsear el archivo: {str(e)}",
                suggestion="Verificar la estructura del archivo Python"
            )

    def _check_imports(self, file_path: Path, content: str, is_critical: bool):
        """üì¶ Verificaci√≥n de imports y dependencias"""
        lines = content.split('\n')

        for line_num, line in enumerate(lines, 1):
            line = line.strip()

            # Imports problem√°ticos
            if line.startswith('from') or line.startswith('import'):
                # Imports relativos problem√°ticos
                if '..' in line and 'from' in line:
                    self._add_problem(
                        file_path=str(file_path),
                        line_number=line_num,
                        severity=Severity.MEDIUM,
                        category=self._categorize_file(file_path),
                        problem_type="RELATIVE_IMPORT",
                        title="Import relativo problem√°tico",
                        description=f"Import relativo que puede causar problemas: {line}",
                        suggestion="Usar imports absolutos cuando sea posible",
                        code_snippet=line
                    )

                # Imports de m√≥dulos cr√≠ticos
                critical_imports = ['os', 'sys', 'subprocess', 'eval', 'exec']
                for critical in critical_imports:
                    if critical in line and not line.startswith('#'):
                        severity = Severity.HIGH if is_critical else Severity.MEDIUM
                        self._add_problem(
                            file_path=str(file_path),
                            line_number=line_num,
                            severity=severity,
                            category=self._categorize_file(file_path),
                            problem_type="CRITICAL_IMPORT",
                            title=f"Import cr√≠tico detectado: {critical}",
                            description=f"Uso de m√≥dulo cr√≠tico que requiere revisi√≥n: {line}",
                            suggestion="Verificar que el uso sea seguro y necesario",
                            code_snippet=line
                        )

    def _check_specific_code_issues(self, file_path: Path, content: str, is_critical: bool):
        """üîß Verificaci√≥n de problemas espec√≠ficos del c√≥digo"""
        lines = content.split('\n')

        for line_num, line in enumerate(lines, 1):
            line_stripped = line.strip()

            # TODO/FIXME/HACK comments
            if any(tag in line_stripped.upper() for tag in ['TODO', 'FIXME', 'HACK', 'XXX']):
                self._add_problem(
                    file_path=str(file_path),
                    line_number=line_num,
                    severity=Severity.LOW,
                    category=self._categorize_file(file_path),
                    problem_type="TODO_COMMENT",
                    title="Comentario TODO/FIXME encontrado",
                    description=f"Comentario que indica trabajo pendiente: {line_stripped}",
                    suggestion="Revisar y completar el trabajo pendiente",
                    code_snippet=line_stripped
                )

            # Hardcoded paths (Windows espec√≠fico)
            if re.search(r'[C-Z]:\\', line_stripped):
                self._add_problem(
                    file_path=str(file_path),
                    line_number=line_num,
                    severity=Severity.MEDIUM,
                    category=self._categorize_file(file_path),
                    problem_type="HARDCODED_PATH",
                    title="Ruta hardcodeada detectada",
                    description=f"Ruta absoluta hardcodeada: {line_stripped}",
                    suggestion="Usar rutas relativas o configuraci√≥n",
                    code_snippet=line_stripped
                )

            # Print statements en producci√≥n (excepto debugging/)
            if ('print(' in line_stripped or 'pprint(' in line_stripped) and \
               'debugging' not in str(file_path) and not line_stripped.startswith('#'):
                self._add_problem(
                    file_path=str(file_path),
                    line_number=line_num,
                    severity=Severity.LOW,
                    category=self._categorize_file(file_path),
                    problem_type="PRINT_STATEMENT",
                    title="Print statement en producci√≥n",
                    description=f"Print statement que deber√≠a ser logging: {line_stripped}",
                    suggestion="Reemplazar con sistema de logging apropiado",
                    code_snippet=line_stripped
                )

    def _check_file_structure(self, file_path: Path, content: str, is_critical: bool):
        """üìã Verificaci√≥n de estructura del archivo"""
        lines = content.split('\n')

        # Archivos muy largos
        if len(lines) > 500:
            self._add_problem(
                file_path=str(file_path),
                line_number=1,
                severity=Severity.LOW,
                category=self._categorize_file(file_path),
                problem_type="LARGE_FILE",
                title="Archivo muy largo",
                description=f"Archivo con {len(lines)} l√≠neas, considerar refactoring",
                suggestion="Dividir en m√≥dulos m√°s peque√±os",
                context={'line_count': len(lines)}
            )

        # Falta de docstring en archivos importantes
        if is_critical and not content.strip().startswith('"""') and not content.strip().startswith("'''"):
            self._add_problem(
                file_path=str(file_path),
                line_number=1,
                severity=Severity.MEDIUM,
                category=self._categorize_file(file_path),
                problem_type="MISSING_DOCSTRING",
                title="Falta docstring en archivo cr√≠tico",
                description="Archivo cr√≠tico sin documentaci√≥n de m√≥dulo",
                suggestion="Agregar docstring descriptivo al inicio del archivo"
            )

    def _detect_circular_dependencies(self):
        """üîÑ Detecci√≥n de dependencias circulares"""
        if self.console:
            self.console.print("\nüîÑ Detectando dependencias circulares...")

        # Mapa de dependencias
        dependencies = {}

        for directory in self.analyze_dirs:
            dir_path = self.workspace_root / directory
            if not dir_path.exists():
                continue

            for file_path in dir_path.rglob("*.py"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()

                    # Extraer imports
                    imports = []
                    for line in content.split('\n'):
                        if line.strip().startswith('from ') or line.strip().startswith('import '):
                            imports.append(line.strip())

                    dependencies[str(file_path)] = imports

                except Exception:
                    continue

        # Detectar ciclos simples (A -> B -> A)
        for file_path, imports in dependencies.items():
            for import_line in imports:
                # Simplificado: buscar imports que podr√≠an crear ciclos
                if 'from .' in import_line or 'from ..' in import_line:
                    self._add_problem(
                        file_path=file_path,
                        line_number=1,
                        severity=Severity.MEDIUM,
                        category=Category.SISTEMA,
                        problem_type="POTENTIAL_CIRCULAR_DEPENDENCY",
                        title="Posible dependencia circular",
                        description=f"Import relativo que podr√≠a crear ciclo: {import_line}",
                        suggestion="Revisar arquitectura de m√≥dulos",
                        code_snippet=import_line
                    )

    def _analyze_code_quality(self):
        """‚ú® An√°lisis de calidad de c√≥digo"""
        if self.console:
            self.console.print("\n‚ú® Analizando calidad de c√≥digo...")

        # Buscar patrones de c√≥digo problem√°tico
        for directory in self.analyze_dirs:
            dir_path = self.workspace_root / directory
            if not dir_path.exists():
                continue

            for file_path in dir_path.rglob("*.py"):
                self._analyze_code_patterns(file_path)

    def _analyze_code_patterns(self, file_path: Path):
        """üéØ An√°lisis de patrones espec√≠ficos de c√≥digo"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            lines = content.split('\n')

            # Funciones muy largas
            in_function = False
            function_start = 0
            function_name = ""
            indent_level = 0

            for line_num, line in enumerate(lines, 1):
                if line.strip().startswith('def '):
                    if in_function and line_num - function_start > 50:
                        self._add_problem(
                            file_path=str(file_path),
                            line_number=function_start,
                            severity=Severity.LOW,
                            category=self._categorize_file(file_path),
                            problem_type="LONG_FUNCTION",
                            title=f"Funci√≥n muy larga: {function_name}",
                            description=f"Funci√≥n con {line_num - function_start} l√≠neas",
                            suggestion="Considerar dividir en funciones m√°s peque√±as"
                        )

                    in_function = True
                    function_start = line_num
                    function_name = line.strip().split('(')[0].replace('def ', '')
                    indent_level = len(line) - len(line.lstrip())

                elif in_function and line.strip() and len(line) - len(line.lstrip()) <= indent_level and line.strip()[0].isalpha():
                    if line_num - function_start > 50:
                        self._add_problem(
                            file_path=str(file_path),
                            line_number=function_start,
                            severity=Severity.LOW,
                            category=self._categorize_file(file_path),
                            problem_type="LONG_FUNCTION",
                            title=f"Funci√≥n muy larga: {function_name}",
                            description=f"Funci√≥n con {line_num - function_start} l√≠neas",
                            suggestion="Considerar dividir en funciones m√°s peque√±as"
                        )
                    in_function = False

        except Exception:
            pass

    def _analyze_configuration(self):
        """‚öôÔ∏è An√°lisis de configuraci√≥n del sistema"""
        if self.console:
            self.console.print("\n‚öôÔ∏è Analizando configuraci√≥n...")

        # Verificar archivos de configuraci√≥n cr√≠ticos
        config_files = [
            'config/config_manager.py',
            'config/live_account_validator.py',
            'requirements.txt'
        ]

        for config_file in config_files:
            file_path = self.workspace_root / config_file
            if not file_path.exists():
                self._add_problem(
                    file_path=str(file_path),
                    line_number=1,
                    severity=Severity.HIGH,
                    category=Category.SISTEMA,
                    problem_type="MISSING_CONFIG_FILE",
                    title=f"Archivo de configuraci√≥n faltante: {config_file}",
                    description=f"Archivo cr√≠tico de configuraci√≥n no encontrado",
                    suggestion="Crear o restaurar archivo de configuraci√≥n"
                )

    def _categorize_file(self, file_path: Path) -> Category:
        """üè∑Ô∏è Categorizar archivo por ubicaci√≥n"""
        path_str = str(file_path).lower()

        if 'dashboard' in path_str:
            return Category.DASHBOARD
        elif any(x in path_str for x in ['trading', 'core/trading']):
            return Category.TRADING
        elif any(x in path_str for x in ['ict_engine', 'ict']):
            return Category.ICT_ENGINE
        elif 'poi' in path_str:
            return Category.POI_SYSTEM
        elif any(x in path_str for x in ['sistema', 'config', 'core']):
            return Category.SISTEMA
        elif any(x in path_str for x in ['utilities', 'utils', 'scripts']):
            return Category.UTILITIES
        else:
            return Category.UNKNOWN

    def _add_problem(self, file_path: str, line_number: int, severity: Severity,
                    category: Category, problem_type: str, title: str,
                    description: str, suggestion: str, code_snippet: str = "",
                    context: Dict[str, Any] = None):
        """‚ûï Agregar problema detectado"""
        problem = DetectedProblem(
            id=f"{len(self.problems):04d}_{problem_type}_{int(time.time())}",
            timestamp=datetime.now().isoformat(),
            file_path=file_path,
            line_number=line_number,
            severity=severity.value,
            category=category.value,
            problem_type=problem_type,
            title=title,
            description=description,
            suggestion=suggestion,
            code_snippet=code_snippet,
            context=context or {}
        )

        self.problems.append(problem)
        self.stats['problems_found'] += 1
        self.stats['by_severity'][severity.name] += 1
        self.stats['by_category'][category.name] += 1

    def _get_code_snippet(self, content: str, line_number: int, context_lines: int = 2) -> str:
        """üìù Obtener snippet de c√≥digo con contexto"""
        lines = content.split('\n')
        start = max(0, line_number - context_lines - 1)
        end = min(len(lines), line_number + context_lines)

        snippet_lines = []
        for i in range(start, end):
            prefix = ">>> " if i == line_number - 1 else "    "
            snippet_lines.append(f"{prefix}{lines[i]}")

        return '\n'.join(snippet_lines)

    def _generate_report(self) -> Dict[str, Any]:
        """üìä Generar reporte completo"""
        if self.console:
            self.console.print("\nüìä Generando reporte...")

        # Ordenar problemas por severidad
        severity_order = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO']
        sorted_problems = sorted(
            self.problems,
            key=lambda p: severity_order.index(p.severity.split()[1])
        )

        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_problems': len(self.problems),
                'files_analyzed': self.stats['files_analyzed'],
                'analysis_time': round(self.stats['analysis_time'], 2)
            },
            'statistics': {
                'by_severity': self.stats['by_severity'],
                'by_category': self.stats['by_category']
            },
            'problems': [p.to_dict() for p in sorted_problems],
            'recommendations': self._generate_recommendations()
        }

        return report

    def _generate_recommendations(self) -> List[str]:
        """üí° Generar recomendaciones basadas en problemas encontrados"""
        recommendations = []

        # Recomendaciones por severidad
        critical_count = self.stats['by_severity']['CRITICAL']
        high_count = self.stats['by_severity']['HIGH']

        if critical_count > 0:
            recommendations.append(f"üö® URGENTE: {critical_count} errores cr√≠ticos requieren atenci√≥n inmediata")

        if high_count > 5:
            recommendations.append(f"‚ö†Ô∏è ALTA PRIORIDAD: {high_count} problemas de alta severidad detectados")

        # Recomendaciones por categor√≠a
        for category, count in self.stats['by_category'].items():
            if count > 10:
                recommendations.append(f"üìÇ Revisar m√≥dulo {category}: {count} problemas detectados")

        # Recomendaciones generales
        if self.stats['files_analyzed'] > 50:
            recommendations.append("‚ú® Considerar implementar CI/CD con an√°lisis autom√°tico")

        return recommendations

    def _save_diagnostics_log(self):
        """üíæ Guardar bit√°cora de diagn√≥sticos"""
        diagnostics_dir = self.workspace_root / "docs" / "bitacoras" / "diagnosticos"
        diagnostics_dir.mkdir(parents=True, exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = diagnostics_dir / f"deteccion_errores_{timestamp}.json"

        report_data = self._generate_report()

        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)

        if self.console:
            self.console.print(f"üíæ Bit√°cora guardada: {log_file}")

    def get_dashboard_summary(self) -> Dict[str, Any]:
        """üìä Resumen para integraci√≥n con dashboard"""
        return {
            'total_problems': len(self.problems),
            'critical_problems': self.stats['by_severity']['CRITICAL'],
            'high_problems': self.stats['by_severity']['HIGH'],
            'files_analyzed': self.stats['files_analyzed'],
            'analysis_time': round(self.stats['analysis_time'], 2),
            'top_problems': [p.to_dict() for p in self.problems[:5]],
            'by_category': self.stats['by_category']
        }


def main():
    """üöÄ Funci√≥n principal del detector de errores"""
    import argparse

    parser = argparse.ArgumentParser(description="üîç Sistema de Detecci√≥n de Errores Jer√°rquico ITC Engine v5.0")
    parser.add_argument("--workspace", default=".", help="Directorio workspace (default: actual)")
    parser.add_argument("--quick", action="store_true", help="An√°lisis r√°pido (solo archivos cr√≠ticos)")
    parser.add_argument("--output", help="Archivo de salida JSON (optional)")

    args = parser.parse_args()

    # Inicializar detector
    detector = ErrorDetector(args.workspace)

    # Ejecutar an√°lisis
    report = detector.analyze_full_system(quick_mode=args.quick)

    # Mostrar resumen
    if RICH_AVAILABLE and detector.console:
        detector.console.print("\nüéØ RESUMEN DEL AN√ÅLISIS")
        detector.console.print("=" * 40)

        summary_table = Table(title="üìä Estad√≠sticas")
        summary_table.add_column("M√©trica")
        summary_table.add_column("Valor")

        summary_table.add_row("Archivos analizados", str(report['summary']['files_analyzed']))
        summary_table.add_row("Problemas encontrados", str(report['summary']['total_problems']))
        summary_table.add_row("Tiempo de an√°lisis", f"{report['summary']['analysis_time']}s")

        detector.console.print(summary_table)

        # Mostrar problemas cr√≠ticos
        critical_problems = [p for p in detector.problems if 'CRITICAL' in p.severity]
        if critical_problems:
            detector.console.print("\nüö® PROBLEMAS CR√çTICOS:")
            for problem in critical_problems[:3]:
                detector.console.print(Panel(
                    f"üìç {problem.title}\nüìÅ {problem.file_path}:{problem.line_number}\nüí° {problem.suggestion}",
                    border_style="red"
                ))

    # Guardar salida opcional
    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"üìÅ Reporte guardado: {args.output}")

    # C√≥digo de salida
    critical_count = detector.stats['by_severity']['CRITICAL']
    return 1 if critical_count > 0 else 0


if __name__ == "__main__":
    sys.exit(main())
