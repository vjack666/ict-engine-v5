#!/usr/bin/env python3
"""
üß™ TEST REALITY CHECK - BREAKER BLOCKS ENTERPRISE
=================================================

OBJETIVO: Verificar qu√© est√° REALMENTE implementado vs la documentaci√≥n

Documentaci√≥n Claims:
‚úÖ BreakerBlockDetectorEnterprise - 864 l√≠neas
‚úÖ Lifecycle management completo
‚úÖ Estados: FORMING ‚Üí CONFIRMED ‚Üí ACTIVE ‚Üí TESTED ‚Üí FAILED
‚úÖ Tipos: VIOLENT, CLEAN, RETEST, FALSE_BREAK
‚úÖ UnifiedMemorySystem v6.1 + SLUC v2.1
‚úÖ Confidence scoring avanzado

REALIDAD CHECK:
‚ùì ¬øEst√° realmente integrado en pattern_detector.py?
‚ùì ¬øFunciona el lifecycle management?
‚ùì ¬øSe puede usar desde el sistema principal?
‚ùì ¬øHay tests que funcionen?

Fecha: 10 Agosto 2025
Sprint: VERDAD vs DOCUMENTACI√ìN
"""

import sys
import os
import traceback
from datetime import datetime
import pandas as pd

# Agregar path del proyecto
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

print("üß™ BREAKER BLOCKS REALITY CHECK - Iniciando...")
print("=" * 60)

# =============================================================================
# TEST 1: IMPORTACI√ìN DE M√ìDULOS
# =============================================================================
print("\nüì¶ TEST 1: IMPORTACI√ìN DE M√ìDULOS")
print("-" * 40)

modules_status = {}

# Test 1.1: BreakerBlockDetectorEnterprise
try:
    from core.ict_engine.advanced_patterns.breaker_blocks_enterprise import (
        BreakerBlockDetectorEnterprise,
        BreakerBlockLifecycle,
        BreakerBlockSignal,
        BreakerBlockType,
        BreakerStatus,
        OrderBlockBreakType
    )
    modules_status['breaker_blocks_enterprise'] = "‚úÖ SUCCESS"
    print("‚úÖ BreakerBlockDetectorEnterprise - IMPORTADO")
    print(f"   üìä Clases disponibles: {len([BreakerBlockDetectorEnterprise, BreakerBlockLifecycle, BreakerBlockSignal])}")
    print(f"   üè∑Ô∏è Enums disponibles: {len([BreakerBlockType, BreakerStatus, OrderBlockBreakType])}")
except Exception as e:
    modules_status['breaker_blocks_enterprise'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå BreakerBlockDetectorEnterprise - ERROR: {e}")

# Test 1.2: PatternDetector integration
try:
    from core.ict_engine.pattern_detector import ICTPatternDetectorEnterprise
    modules_status['pattern_detector'] = "‚úÖ SUCCESS"
    print("‚úÖ ICTPatternDetectorEnterprise - IMPORTADO")
    
    # Verificar si tiene m√©todo de breaker blocks
    detector = ICTPatternDetectorEnterprise()
    has_breaker_method = hasattr(detector, 'detect_breaker_blocks')
    has_breaker_enterprise_method = hasattr(detector, 'detect_breaker_blocks_enterprise')
    
    print(f"   üîç has detect_breaker_blocks: {has_breaker_method}")
    print(f"   üîç has detect_breaker_blocks_enterprise: {has_breaker_enterprise_method}")
    
except Exception as e:
    modules_status['pattern_detector'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå ICTPatternDetectorEnterprise - ERROR: {e}")

# Test 1.3: UnifiedMemorySystem
try:
    from core.data_management.unified_memory_system import UnifiedMemorySystem
    modules_status['memory_system'] = "‚úÖ SUCCESS"
    print("‚úÖ UnifiedMemorySystem - IMPORTADO")
except Exception as e:
    modules_status['memory_system'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå UnifiedMemorySystem - ERROR: {e}")

# Test 1.4: SmartTradingLogger
try:
    from core.smart_trading_logger import SmartTradingLogger
    modules_status['logger'] = "‚úÖ SUCCESS"
    print("‚úÖ SmartTradingLogger - IMPORTADO")
except Exception as e:
    modules_status['logger'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå SmartTradingLogger - ERROR: {e}")

# =============================================================================
# TEST 2: CREACI√ìN DE INSTANCIAS
# =============================================================================
print("\nüèóÔ∏è TEST 2: CREACI√ìN DE INSTANCIAS")
print("-" * 40)

instances_status = {}

# Test 2.1: BreakerBlockDetectorEnterprise standalone
try:
    if 'breaker_blocks_enterprise' in modules_status and modules_status['breaker_blocks_enterprise'] == "‚úÖ SUCCESS":
        detector_enterprise = BreakerBlockDetectorEnterprise()
        instances_status['detector_enterprise'] = "‚úÖ SUCCESS"
        print("‚úÖ BreakerBlockDetectorEnterprise instance - CREADO")
        print(f"   üìä Config keys: {len(detector_enterprise.config)}")
        print(f"   üìà Stats keys: {len(detector_enterprise.processing_stats)}")
    else:
        instances_status['detector_enterprise'] = "‚è≠Ô∏è SKIPPED - Module failed"
        print("‚è≠Ô∏è BreakerBlockDetectorEnterprise - SALTADO (m√≥dulo fall√≥)")
except Exception as e:
    instances_status['detector_enterprise'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå BreakerBlockDetectorEnterprise creation - ERROR: {e}")

# Test 2.2: BreakerBlockDetectorEnterprise con dependencies
try:
    if all(modules_status[key] == "‚úÖ SUCCESS" for key in ['breaker_blocks_enterprise', 'memory_system', 'logger']):
        memory_system = UnifiedMemorySystem()
        logger = SmartTradingLogger()
        
        detector_full = BreakerBlockDetectorEnterprise(memory_system=memory_system, logger=logger)
        instances_status['detector_full'] = "‚úÖ SUCCESS"
        print("‚úÖ BreakerBlockDetectorEnterprise (with dependencies) - CREADO")
        print(f"   üß† Memory system: {type(memory_system).__name__}")
        print(f"   üìù Logger: {type(logger).__name__}")
    else:
        instances_status['detector_full'] = "‚è≠Ô∏è SKIPPED - Dependencies failed"
        print("‚è≠Ô∏è BreakerBlockDetectorEnterprise (full) - SALTADO (dependencias fallaron)")
except Exception as e:
    instances_status['detector_full'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå BreakerBlockDetectorEnterprise (full) creation - ERROR: {e}")

# =============================================================================
# TEST 3: FUNCIONALIDAD B√ÅSICA
# =============================================================================
print("\n‚öôÔ∏è TEST 3: FUNCIONALIDAD B√ÅSICA")
print("-" * 40)

functionality_status = {}

# Test 3.1: Configuraci√≥n y m√©todos
try:
    if 'detector_enterprise' in instances_status and instances_status['detector_enterprise'] == "‚úÖ SUCCESS":
        # Verificar m√©todos principales
        methods_check = {
            'detect_breaker_blocks_enterprise': hasattr(detector_enterprise, 'detect_breaker_blocks_enterprise'),
            'get_active_breakers': hasattr(detector_enterprise, 'get_active_breakers'),
            'get_processing_stats': hasattr(detector_enterprise, 'get_processing_stats'),
            '_is_valid_breaker_candidate': hasattr(detector_enterprise, '_is_valid_breaker_candidate'),
            '_analyze_order_block_break': hasattr(detector_enterprise, '_analyze_order_block_break'),
            '_analyze_retest_behavior': hasattr(detector_enterprise, '_analyze_retest_behavior')
        }
        
        methods_passed = sum(methods_check.values())
        functionality_status['methods'] = f"‚úÖ {methods_passed}/6 methods available"
        print(f"‚úÖ M√©todos disponibles: {methods_passed}/6")
        
        for method, available in methods_check.items():
            status = "‚úÖ" if available else "‚ùå"
            print(f"   {status} {method}")
            
    else:
        functionality_status['methods'] = "‚è≠Ô∏è SKIPPED - Instance failed"
        print("‚è≠Ô∏è Verificaci√≥n de m√©todos - SALTADO")
except Exception as e:
    functionality_status['methods'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Verificaci√≥n de m√©todos - ERROR: {e}")

# Test 3.2: Stats iniciales
try:
    if 'detector_enterprise' in instances_status and instances_status['detector_enterprise'] == "‚úÖ SUCCESS":
        stats = detector_enterprise.get_processing_stats()
        functionality_status['stats'] = "‚úÖ SUCCESS"
        print("‚úÖ Stats iniciales obtenidas:")
        for key, value in stats.items():
            print(f"   üìä {key}: {value}")
    else:
        functionality_status['stats'] = "‚è≠Ô∏è SKIPPED"
        print("‚è≠Ô∏è Stats - SALTADO")
except Exception as e:
    functionality_status['stats'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Stats - ERROR: {e}")

# =============================================================================
# TEST 4: INTEGRACI√ìN CON PATTERN DETECTOR
# =============================================================================
print("\nüîó TEST 4: INTEGRACI√ìN CON PATTERN DETECTOR")
print("-" * 40)

integration_status = {}

# Test 4.1: Verificar m√©todo en PatternDetector
try:
    if 'pattern_detector' in modules_status and modules_status['pattern_detector'] == "‚úÖ SUCCESS":
        detector_main = ICTPatternDetectorEnterprise()
        
        # Buscar el TODO espec√≠fico
        import inspect
        source = inspect.getsource(detector_main.detect_breaker_blocks)
        has_todo = "TODO: Implementar l√≥gica completa de Breaker Block" in source
        
        integration_status['todo_found'] = f"‚úÖ TODO encontrado: {has_todo}"
        print(f"‚úÖ TODO en detect_breaker_blocks: {has_todo}")
        
        if has_todo:
            print("   ‚ö†Ô∏è CONFIRMADO: Breaker Blocks NO est√° integrado en PatternDetector")
            print("   üìù TODO line found in detect_breaker_blocks method")
        
    else:
        integration_status['todo_found'] = "‚è≠Ô∏è SKIPPED"
        print("‚è≠Ô∏è Verificaci√≥n TODO - SALTADO")
except Exception as e:
    integration_status['todo_found'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Verificaci√≥n TODO - ERROR: {e}")

# =============================================================================
# TEST 5: TEST DE DATOS SIMULADOS
# =============================================================================
print("\nüìä TEST 5: TEST CON DATOS SIMULADOS")
print("-" * 40)

simulation_status = {}

# Test 5.1: Crear datos simulados
try:
    # Crear DataFrame simulado
    dates = pd.date_range(start='2025-08-01', periods=100, freq='15T')
    np_random = __import__('numpy').random
    
    data = pd.DataFrame({
        'timestamp': dates,
        'open': 1.0900 + np_random.normal(0, 0.0020, 100).cumsum(),
        'high': 1.0900 + np_random.normal(0, 0.0020, 100).cumsum() + 0.0010,
        'low': 1.0900 + np_random.normal(0, 0.0020, 100).cumsum() - 0.0010,
        'close': 1.0900 + np_random.normal(0, 0.0020, 100).cumsum(),
        'volume': np_random.randint(100, 1000, 100)
    })
    data.set_index('timestamp', inplace=True)
    
    simulation_status['data_creation'] = "‚úÖ SUCCESS"
    print(f"‚úÖ Datos simulados creados: {len(data)} velas")
    print(f"   üìà Price range: {data['low'].min():.5f} - {data['high'].max():.5f}")
    
except Exception as e:
    simulation_status['data_creation'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Creaci√≥n de datos - ERROR: {e}")

# Test 5.2: Crear Order Blocks simulados
try:
    if simulation_status.get('data_creation') == "‚úÖ SUCCESS":
        # Order Blocks simulados
        order_blocks = [
            {
                'id': 'OB_001',
                'type': 'BULLISH_OB',
                'range_high': 1.0920,
                'range_low': 1.0910,
                'price': 1.0915,
                'confidence': 0.75,
                'created_at': '2025-08-09T10:00:00',
                'broken': False
            },
            {
                'id': 'OB_002',
                'type': 'BEARISH_OB',
                'range_high': 1.0940,
                'range_low': 1.0930,
                'price': 1.0935,
                'confidence': 0.80,
                'created_at': '2025-08-09T14:00:00',
                'broken': False
            }
        ]
        
        simulation_status['order_blocks'] = "‚úÖ SUCCESS"
        print(f"‚úÖ Order Blocks simulados: {len(order_blocks)}")
        for ob in order_blocks:
            print(f"   üì¶ {ob['id']}: {ob['type']} @ {ob['price']}")
            
    else:
        simulation_status['order_blocks'] = "‚è≠Ô∏è SKIPPED"
        print("‚è≠Ô∏è Order Blocks simulados - SALTADO")
except Exception as e:
    simulation_status['order_blocks'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Order Blocks simulados - ERROR: {e}")

# Test 5.3: Ejecutar detecci√≥n de Breaker Blocks
try:
    if (simulation_status.get('data_creation') == "‚úÖ SUCCESS" and 
        simulation_status.get('order_blocks') == "‚úÖ SUCCESS" and
        instances_status.get('detector_enterprise') == "‚úÖ SUCCESS"):
        
        # Ejecutar detecci√≥n
        breaker_signals = detector_enterprise.detect_breaker_blocks_enterprise(
            data=data,
            order_blocks=order_blocks,
            symbol="EURUSD",
            timeframe="M15"
        )
        
        simulation_status['detection'] = f"‚úÖ SUCCESS - {len(breaker_signals)} breakers detected"
        print(f"‚úÖ Detecci√≥n ejecutada: {len(breaker_signals)} Breaker Blocks detectados")
        
        # Mostrar detalles si hay resultados
        for i, breaker in enumerate(breaker_signals):
            print(f"   üí• Breaker {i+1}: {breaker.breaker_type.value}")
            print(f"      üéØ Confidence: {breaker.confidence:.2f}")
            print(f"      üìä Status: {breaker.status.value}")
            print(f"      üí∞ Price: {breaker.price_level:.5f}")
            
        # Verificar stats actualizados
        updated_stats = detector_enterprise.get_processing_stats()
        print(f"   üìä Stats updated: {updated_stats}")
        
    else:
        missing = []
        if simulation_status.get('data_creation') != "‚úÖ SUCCESS":
            missing.append("data")
        if simulation_status.get('order_blocks') != "‚úÖ SUCCESS":
            missing.append("order_blocks")
        if instances_status.get('detector_enterprise') != "‚úÖ SUCCESS":
            missing.append("detector")
            
        simulation_status['detection'] = f"‚è≠Ô∏è SKIPPED - Missing: {', '.join(missing)}"
        print(f"‚è≠Ô∏è Detecci√≥n de Breaker Blocks - SALTADO (faltan: {', '.join(missing)})")
        
except Exception as e:
    simulation_status['detection'] = f"‚ùå FAILED: {e}"
    print(f"‚ùå Detecci√≥n de Breaker Blocks - ERROR: {e}")
    print(f"   üîç Traceback: {traceback.format_exc()}")

# =============================================================================
# RESUMEN FINAL
# =============================================================================
print("\n" + "=" * 60)
print("üìã RESUMEN FINAL - BREAKER BLOCKS REALITY CHECK")
print("=" * 60)

print("\nüì¶ M√ìDULOS:")
for module, status in modules_status.items():
    print(f"   {module}: {status}")

print("\nüèóÔ∏è INSTANCIAS:")
for instance, status in instances_status.items():
    print(f"   {instance}: {status}")

print("\n‚öôÔ∏è FUNCIONALIDAD:")
for func, status in functionality_status.items():
    print(f"   {func}: {status}")

print("\nüîó INTEGRACI√ìN:")
for integration, status in integration_status.items():
    print(f"   {integration}: {status}")

print("\nüìä SIMULACI√ìN:")
for simulation, status in simulation_status.items():
    print(f"   {simulation}: {status}")

# Calcular score total
total_tests = (len(modules_status) + len(instances_status) + 
               len(functionality_status) + len(integration_status) + 
               len(simulation_status))

passed_tests = sum(1 for status_dict in [modules_status, instances_status, 
                                        functionality_status, integration_status, 
                                        simulation_status] 
                  for status in status_dict.values() 
                  if status.startswith("‚úÖ"))

score_percentage = (passed_tests / total_tests) * 100 if total_tests > 0 else 0

print(f"\nüéØ SCORE FINAL: {passed_tests}/{total_tests} tests passed ({score_percentage:.1f}%)")

if score_percentage >= 80:
    print("üéä VEREDICTO: DOCUMENTACI√ìN MAYORMENTE CORRECTA")
elif score_percentage >= 60:
    print("‚ö†Ô∏è VEREDICTO: DOCUMENTACI√ìN PARCIALMENTE CORRECTA")
else:
    print("‚ùå VEREDICTO: DOCUMENTACI√ìN INCORRECTA O INCOMPLETA")

print(f"\nüïê Test completado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
