# -*- coding: utf-8 -*-
"""
üß™ TEST POI SYSTEM v6.0 ENTERPRISE
===================================

Test de integraci√≥n completo del POI System v6.0 Enterprise
con datos reales de FTMO Global Markets MT5 Terminal.

Autor: ICT Engine v6.1.0 Enterprise Team
Fecha: Agosto 7, 2025
"""

import sys
import time
from datetime import datetime, timedelta
from pathlib import Path

# A√±adir path del proyecto
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

def test_poi_system_integration():
    """Test de integraci√≥n completo del POI System"""
    
    print("üß™ ICT ENGINE v6.0 ENTERPRISE - POI SYSTEM TEST")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üñ•Ô∏è  Sistema: POI System v6.0 Enterprise")
    print(f"üéØ Objetivo: Validaci√≥n completa de Points of Interest")
    print("=" * 60)
    
    try:
        # 1. IMPORTAR POI SYSTEM
        print("\nüîß FASE 1: Importando POI System...")
        
        from core.analysis.poi_system import get_poi_system, POIType, POISignificance, POIStatus
        
        print("‚úÖ POI System importado correctamente")
        
        # 2. INICIALIZAR SISTEMA
        print("\nüöÄ FASE 2: Inicializando POI System...")
        
        config = {
            'enable_debug': True,
            'min_poi_strength': 60.0,
            'max_active_pois': 30,
            'enable_order_blocks': True,
            'enable_fair_value_gaps': True,
            'enable_swing_points': True,
            'enable_session_levels': True,
            'enable_liquidity_pools': True,
            'enable_fibonacci_levels': True,
            'enable_psychological_levels': True,
            'proximity_threshold': 0.0008
        }
        
        poi_system = get_poi_system(config)
        print(f"‚úÖ POI System inicializado: {poi_system.is_initialized}")
        print(f"üìä Configuraci√≥n: {len(config)} par√°metros")
        
        # 3. VERIFICAR COMPONENTES
        print("\nüîç FASE 3: Verificando componentes integrados...")
        
        print(f"   Downloader conectado: {poi_system._downloader is not None}")
        print(f"   Pattern Detector conectado: {poi_system._pattern_detector is not None}")
        print(f"   Market Analyzer conectado: {poi_system._market_analyzer is not None}")
        
        # 4. DETECCI√ìN PRINCIPAL DE POIS
        print("\nüéØ FASE 4: Detecci√≥n principal de POIs...")
        
        start_time = time.time()
        
        pois = poi_system.detect_pois(
            symbol="EURUSD",
            timeframe="M15",
            lookback_days=5
        )
        
        analysis_time = time.time() - start_time
        
        print(f"‚úÖ Detecci√≥n completada en {analysis_time:.3f}s")
        print(f"üé™ POIs detectados: {len(pois)}")
        
        # Verificar performance target
        if analysis_time > 0.1:
            print(f"‚ö†Ô∏è  WARNING: Tiempo excede target de 100ms")
        else:
            print(f"‚ö° PERFORMANCE: Dentro del target (<100ms)")
        
        # 5. ANALIZAR POIS DETECTADOS
        if pois:
            print(f"\nüìä FASE 5: An√°lisis de POIs detectados...")
            
            pois_by_type = {}
            pois_by_significance = {}
            total_strength = 0
            
            # Mostrar primeros 10 POIs
            for i, poi in enumerate(pois[:10], 1):
                print(f"\nüéØ POI {i}: {poi.poi_type.value.upper()}")
                print(f"   üí∞ Precio: {poi.price_level:.5f}")
                print(f"   üìä Zona: {poi.price_zone[0]:.5f} - {poi.price_zone[1]:.5f}")
                print(f"   ‚≠ê Significancia: {poi.significance.value.upper()}")
                print(f"   üí™ Strength: {poi.strength:.1f}%")
                print(f"   üîÑ Estado: {poi.status.value}")
                print(f"   üèõÔ∏è  Estructura: {poi.market_structure}")
                print(f"   üîó Confluencias: {', '.join(poi.confluences[:3])}")
                print(f"   ‚è∞ Expira: {poi.expiry_time.strftime('%H:%M') if poi.expiry_time else 'N/A'}")
                print(f"   üÜî ID: {poi.analysis_id}")
                
                # Contar estad√≠sticas
                ptype = poi.poi_type.value
                pois_by_type[ptype] = pois_by_type.get(ptype, 0) + 1
                
                sig = poi.significance.value
                pois_by_significance[sig] = pois_by_significance.get(sig, 0) + 1
                
                total_strength += poi.strength
            
            # 6. ESTAD√çSTICAS DETALLADAS
            print(f"\nüìà FASE 6: Estad√≠sticas de POIs...")
            
            avg_strength = total_strength / len(pois)
            
            print(f"üìä RESUMEN ESTAD√çSTICO:")
            print(f"   Total POIs: {len(pois)}")
            print(f"   Strength promedio: {avg_strength:.1f}%")
            print(f"   Tiempo de detecci√≥n: {analysis_time:.3f}s")
            
            print(f"\nüé™ POR TIPO DE POI:")
            for ptype, count in pois_by_type.items():
                print(f"   {ptype.replace('_', ' ').title()}: {count}")
            
            print(f"\n‚≠ê POR SIGNIFICANCIA:")
            for sig, count in pois_by_significance.items():
                print(f"   {sig.title()}: {count}")
            
            # Validaciones
            if len(pois_by_type) >= 4:
                print("‚úÖ DIVERSIDAD: M√∫ltiples tipos de POI detectados")
            else:
                print("‚ö†Ô∏è  DIVERSIDAD: Pocos tipos de POI")
            
            if avg_strength >= 65.0:
                print("‚úÖ CALIDAD: Strength promedio bueno")
            else:
                print("‚ö†Ô∏è  CALIDAD: Strength promedio bajo")
            
            # Verificar POIs cr√≠ticos
            critical_pois = [p for p in pois if p.significance == POISignificance.CRITICAL]
            high_pois = [p for p in pois if p.significance == POISignificance.HIGH]
            
            print(f"\nüî• POIs CR√çTICOS: {len(critical_pois)}")
            print(f"üî• POIs ALTOS: {len(high_pois)}")
            
        else:
            print("\n‚ö†Ô∏è  FASE 5: No se detectaron POIs")
            print("   Esto puede indicar condiciones de mercado espec√≠ficas")
        
        # 7. TEST DE FUNCIONALIDADES ESPEC√çFICAS
        print(f"\nüéØ FASE 7: Test de funcionalidades espec√≠ficas...")
        
        # Test buscar POIs por tipo
        if pois:
            order_blocks = poi_system.get_active_pois(POIType.ORDER_BLOCK)
            fvgs = poi_system.get_active_pois(POIType.FAIR_VALUE_GAP)
            swing_points = poi_system.get_active_pois(POIType.SWING_HIGH)
            
            print(f"   Order Blocks activos: {len(order_blocks)}")
            print(f"   FVGs activos: {len(fvgs)}")
            print(f"   Swing Points activos: {len(swing_points)}")
            
            # Test buscar POIs cerca del precio actual
            if pois:
                current_price = 1.16500  # Precio simulado
                nearby_pois = poi_system.get_pois_near_price(current_price, 0.0050)
                print(f"   POIs cerca de {current_price:.5f}: {len(nearby_pois)}")
                
                for poi in nearby_pois[:3]:
                    distance = abs(poi.price_level - current_price)
                    print(f"     {poi.poi_type.value}: {poi.price_level:.5f} (dist: {distance*10000:.1f} pips)")
        
        # 8. RESUMEN DEL SISTEMA
        print(f"\nüìã FASE 8: Resumen del POI System...")
        
        summary = poi_system.get_poi_summary()
        
        print(f"üìà RESUMEN POI SYSTEM:")
        print(f"   Total activos: {summary['total_active']}")
        print(f"   Strength promedio: {summary['avg_strength']}%")
        print(f"   Hist√≥ricos: {summary['historical_count']}")
        print(f"   Pr√≥xima expiraci√≥n: {summary['next_expiry']}")
        
        print(f"\nüé™ DISTRIBUCI√ìN POR TIPO:")
        for ptype, count in summary['by_type'].items():
            print(f"   {ptype.replace('_', ' ').title()}: {count}")
        
        print(f"\n‚≠ê DISTRIBUCI√ìN POR SIGNIFICANCIA:")
        for sig, count in summary['by_significance'].items():
            print(f"   {sig.title()}: {count}")
        
        # 9. M√âTRICAS DE PERFORMANCE
        print(f"\n‚ö° FASE 9: M√©tricas de performance...")
        
        metrics = poi_system.get_performance_metrics()
        
        print(f"üìä M√âTRICAS DE RENDIMIENTO:")
        print(f"   POIs creados: {metrics['total_pois_created']}")
        print(f"   POIs activos: {metrics['active_pois']}")
        print(f"   Lifetime promedio: {metrics['avg_poi_lifetime']}")
        print(f"   Tasa de √©xito: {metrics['success_rate']:.1f}%")
        print(f"   √öltima actualizaci√≥n: {metrics['last_update']}")
        
        # 10. TEST DE M√öLTIPLES TIMEFRAMES
        print(f"\nüïê FASE 10: Test multi-timeframe...")
        
        timeframes = ["M5", "M15", "H1"]
        tf_results = {}
        
        for tf in timeframes:
            print(f"\n   Analizando {tf}...")
            start_tf = time.time()
            
            tf_pois = poi_system.detect_pois("EURUSD", tf, 3)
            tf_time = time.time() - start_tf
            
            tf_results[tf] = {
                'pois': len(tf_pois),
                'time': tf_time,
                'avg_strength': sum(p.strength for p in tf_pois) / len(tf_pois) if tf_pois else 0
            }
            
            print(f"   ‚úÖ {tf}: {len(tf_pois)} POIs en {tf_time:.3f}s")
        
        print(f"\nüìä RESULTADOS MULTI-TIMEFRAME:")
        for tf, result in tf_results.items():
            print(f"   {tf}: {result['pois']} POIs, {result['avg_strength']:.1f}% avg strength")
        
        # 11. VALIDACI√ìN FINAL
        print(f"\n‚úÖ FASE 11: Validaci√≥n final...")
        
        total_success = True
        
        # Verificar performance
        if analysis_time <= 0.1:
            print("‚úÖ PERFORMANCE: Tiempo de detecci√≥n dentro del target")
        else:
            print("‚ùå PERFORMANCE: Tiempo de detecci√≥n excede target")
            total_success = False
        
        # Verificar inicializaci√≥n
        if poi_system.is_initialized:
            print("‚úÖ INICIALIZACI√ìN: POI System correctamente inicializado")
        else:
            print("‚ùå INICIALIZACI√ìN: POI System no inicializado")
            total_success = False
        
        # Verificar detecci√≥n
        if len(pois) > 0:
            print("‚úÖ DETECCI√ìN: Capacidad de detectar POIs confirmada")
        else:
            print("‚ö†Ô∏è  DETECCI√ìN: No se detectaron POIs")
        
        # Verificar diversidad
        if len(summary['by_type']) >= 3:
            print("‚úÖ DIVERSIDAD: M√∫ltiples tipos de POI detectados")
        else:
            print("‚ö†Ô∏è  DIVERSIDAD: Pocos tipos de POI detectados")
        
        # Verificar funcionalidades
        if summary['total_active'] > 0:
            print("‚úÖ FUNCIONALIDADES: Sistema de gesti√≥n de POIs activo")
        else:
            print("‚ö†Ô∏è  FUNCIONALIDADES: Sin POIs activos para gestionar")
        
        # RESULTADO FINAL
        print("\n" + "=" * 60)
        if total_success and len(pois) > 0:
            print("üéâ RESULTADO: TEST COMPLETADO EXITOSAMENTE")
            print("‚úÖ POI System v6.0 Enterprise VALIDADO")
        else:
            print("‚ö†Ô∏è  RESULTADO: TEST COMPLETADO CON WARNINGS")
            print("üîß Revisar componentes marcados")
        
        print("=" * 60)
        
        return total_success, pois, summary
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST: {e}")
        import traceback
        traceback.print_exc()
        return False, [], {}


def test_poi_specific_functionality():
    """Test espec√≠fico de funcionalidades del POI System"""
    
    print("\nüéØ TEST ESPEC√çFICO DE FUNCIONALIDADES POI")
    print("-" * 50)
    
    try:
        from core.analysis.poi_system import get_poi_system, POIType, POISignificance
        
        poi_system = get_poi_system({
            'enable_debug': False,  # Menos verbose
            'min_poi_strength': 50.0,  # M√°s permisivo
            'max_active_pois': 20
        })
        
        # Test detecci√≥n espec√≠fica por tipo
        print("\nüîç Testing detecci√≥n por tipo...")
        
        pois = poi_system.detect_pois("EURUSD", "M15", 3)
        
        # Contar tipos detectados
        type_counts = {}
        for poi in pois:
            ptype = poi.poi_type.value
            type_counts[ptype] = type_counts.get(ptype, 0) + 1
        
        expected_types = [
            'order_block', 'fair_value_gap', 'swing_high', 'swing_low',
            'session_high', 'session_low', 'liquidity_pool', 'fibonacci_level',
            'psychological_level'
        ]
        
        for expected in expected_types:
            count = type_counts.get(expected, 0)
            if count > 0:
                print(f"‚úÖ {expected.replace('_', ' ').title()}: {count} detectados")
            else:
                print(f"‚ÑπÔ∏è  {expected.replace('_', ' ').title()}: No detectado")
        
        # Test gesti√≥n de POIs
        print(f"\nüîÑ Testing gesti√≥n de POIs...")
        
        if pois:
            # Test filtros
            high_significance = [p for p in pois if p.significance == POISignificance.HIGH]
            critical_pois = [p for p in pois if p.significance == POISignificance.CRITICAL]
            strong_pois = [p for p in pois if p.strength >= 80.0]
            
            print(f"   POIs alta significancia: {len(high_significance)}")
            print(f"   POIs cr√≠ticos: {len(critical_pois)}")
            print(f"   POIs strength >80%: {len(strong_pois)}")
            
            # Test b√∫squeda por proximidad
            if pois:
                test_price = pois[0].price_level
                nearby = poi_system.get_pois_near_price(test_price, 0.0020)
                print(f"   POIs cerca de {test_price:.5f}: {len(nearby)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test espec√≠fico: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Iniciando test completo del POI System...")
    
    # Test principal
    success, pois, summary = test_poi_system_integration()
    
    # Test espec√≠fico
    specific_success = test_poi_specific_functionality()
    
    # Resumen final
    print(f"\nüìã RESUMEN FINAL:")
    print(f"   Test principal: {'‚úÖ PASS' if success else '‚ùå FAIL'}")
    print(f"   Test espec√≠fico: {'‚úÖ PASS' if specific_success else '‚ùå FAIL'}")
    print(f"   POIs detectados: {len(pois)}")
    print(f"   Tipos √∫nicos: {len(summary.get('by_type', {}))}")
    print(f"   Strength promedio: {summary.get('avg_strength', 0):.1f}%")
    
    if success and specific_success:
        print("\nüéâ TODOS LOS TESTS PASARON")
        print("‚úÖ POI System v6.0 Enterprise LISTO PARA PRODUCCI√ìN")
    else:
        print("\n‚ö†Ô∏è  ALGUNOS TESTS FALLARON")
        print("üîß Revisar logs arriba para detalles")
