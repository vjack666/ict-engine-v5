# -*- coding: utf-8 -*-
"""
üß™ TEST PATTERN DETECTOR v6.0 ENTERPRISE
==========================================

Test de integraci√≥n completo del Pattern Detector v6.0 Enterprise
con datos reales de FundedNext MT5 Terminal.

Autor: ICT Engine v6.1.0 Enterprise Team
Fecha: Agosto 7, 2025
"""

import sys
import time
from datetime import datetime, timedelta
from pathlib import Path

# A√±adir path del proyecto
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

def test_pattern_detector_integration():
    """Test de integraci√≥n completo del Pattern Detector"""
    
    print("üß™ ICT ENGINE v6.0 ENTERPRISE - PATTERN DETECTOR TEST")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üñ•Ô∏è  Sistema: Pattern Detector v6.0 Enterprise")
    print(f"üéØ Objetivo: Validaci√≥n completa con datos reales")
    print("=" * 60)
    
    try:
        # 1. IMPORTAR PATTERN DETECTOR
        print("\nüîß FASE 1: Importando Pattern Detector...")
        
        from core.analysis.pattern_detector import get_pattern_detector, PatternType, PatternConfidence
        
        print("‚úÖ Pattern Detector importado correctamente")
        
        # 2. INICIALIZAR DETECTOR
        print("\nüöÄ FASE 2: Inicializando detector...")
        
        config = {
            'enable_debug': True,
            'min_confidence': 65.0,
            'enable_silver_bullet': True,
            'enable_judas_swing': True,
            'enable_liquidity_grab': True,
            'enable_optimal_trade_entry': True,
            'use_multi_timeframe': True,
            'max_patterns_per_analysis': 8,
            'fvg_min_size': 0.0003,
            'order_block_strength': 0.6
        }
        
        detector = get_pattern_detector(config)
        print(f"‚úÖ Detector inicializado: {detector.is_initialized}")
        print(f"üìä Configuraci√≥n: {len(config)} par√°metros")
        
        # 3. VERIFICAR COMPONENTES
        print("\nüîç FASE 3: Verificando componentes...")
        
        print(f"   Downloader conectado: {detector._downloader is not None}")
        print(f"   Cache habilitado: {detector.config['enable_cache']}")
        print(f"   Debug activo: {detector.config['enable_debug']}")
        
        # 4. AN√ÅLISIS DE PATRONES PRINCIPAL
        print("\nüéØ FASE 4: An√°lisis principal de patrones...")
        
        start_time = time.time()
        
        patterns = detector.detect_patterns(
            symbol="EURUSD",
            timeframe="M15",
            lookback_days=5
        )
        
        analysis_time = time.time() - start_time
        
        print(f"‚úÖ An√°lisis completado en {analysis_time:.3f}s")
        print(f"üé™ Patrones detectados: {len(patterns)}")
        
        if analysis_time > 0.05:
            print(f"‚ö†Ô∏è  WARNING: Tiempo excede target de 50ms")
        else:
            print(f"‚ö° PERFORMANCE: Dentro del target (<50ms)")
        
        # 5. ANALIZAR PATRONES DETECTADOS
        if patterns:
            print("\nüìä FASE 5: An√°lisis de patrones detectados...")
            
            patterns_by_type = {}
            patterns_by_confidence = {}
            total_strength = 0
            
            for i, pattern in enumerate(patterns, 1):
                print(f"\nüéØ PATR√ìN {i}: {pattern.pattern_type.value.upper()}")
                print(f"   üìà Direcci√≥n: {pattern.direction.value.upper()}")
                print(f"   üé™ Confianza: {pattern.confidence.value.upper()}")
                print(f"   üí™ Strength: {pattern.strength:.1f}%")
                print(f"   üìä Probabilidad: {pattern.probability:.1f}%")
                print(f"   üéØ Entry Zone: {pattern.entry_zone[0]:.5f} - {pattern.entry_zone[1]:.5f}")
                print(f"   üõ°Ô∏è  Stop Loss: {pattern.stop_loss:.5f}")
                print(f"   üèÜ Take Profit: {pattern.take_profit_1:.5f}")
                print(f"   ‚ö° R:R Ratio: {pattern.risk_reward_ratio:.2f}")
                print(f"   üèõÔ∏è  Sesi√≥n: {pattern.session.value}")
                print(f"   üîó Confluencias: {', '.join(pattern.confluences)}")
                print(f"   ‚è∞ Time Sensitivity: {pattern.time_sensitivity}")
                
                if pattern.narrative:
                    print(f"   üìñ Narrativa: {pattern.narrative[:100]}...")
                
                # Contar por tipo
                ptype = pattern.pattern_type.value
                patterns_by_type[ptype] = patterns_by_type.get(ptype, 0) + 1
                
                # Contar por confianza
                conf = pattern.confidence.value
                patterns_by_confidence[conf] = patterns_by_confidence.get(conf, 0) + 1
                
                total_strength += pattern.strength
            
            # 6. ESTAD√çSTICAS
            print("\nüìà FASE 6: Estad√≠sticas del an√°lisis...")
            
            avg_strength = total_strength / len(patterns)
            
            print(f"üìä RESUMEN ESTAD√çSTICO:")
            print(f"   Total patrones: {len(patterns)}")
            print(f"   Strength promedio: {avg_strength:.1f}%")
            print(f"   Tiempo de an√°lisis: {analysis_time:.3f}s")
            
            print(f"\nüé™ POR TIPO DE PATR√ìN:")
            for ptype, count in patterns_by_type.items():
                print(f"   {ptype.replace('_', ' ').title()}: {count}")
            
            print(f"\nüéØ POR NIVEL DE CONFIANZA:")
            for conf, count in patterns_by_confidence.items():
                print(f"   {conf.title()}: {count}")
            
            # Validar que tenemos diversidad de patrones
            if len(patterns_by_type) >= 3:
                print("‚úÖ DIVERSIDAD: M√∫ltiples tipos de patrones detectados")
            else:
                print("‚ö†Ô∏è  DIVERSIDAD: Pocos tipos de patrones")
            
            # Validar strength promedio
            if avg_strength >= 70.0:
                print("‚úÖ CALIDAD: Strength promedio bueno")
            else:
                print("‚ö†Ô∏è  CALIDAD: Strength promedio bajo")
        
        else:
            print("\n‚ö†Ô∏è  FASE 5: No se detectaron patrones")
            print("   Esto puede ser normal dependiendo de condiciones de mercado")
        
        # 7. M√âTRICAS DE PERFORMANCE
        print("\n‚ö° FASE 7: M√©tricas de performance...")
        
        metrics = detector.get_performance_metrics()
        
        print(f"üìä M√âTRICAS DE RENDIMIENTO:")
        print(f"   An√°lisis totales: {metrics['total_analyses']}")
        print(f"   Tiempo promedio: {metrics['avg_analysis_time']:.3f}s")
        print(f"   Patrones detectados: {metrics['patterns_detected']}")
        print(f"   Tasa de √©xito: {metrics['success_rate']:.1f}%")
        print(f"   √öltima actualizaci√≥n: {metrics['last_update']}")
        
        # 8. RESUMEN FINAL
        print("\nüìã FASE 8: Resumen del detector...")
        
        summary = detector.get_pattern_summary()
        
        print(f"üìà RESUMEN DETECTOR:")
        print(f"   Total patrones: {summary['total_patterns']}")
        print(f"   Strength promedio: {summary['avg_strength']}%")
        print(f"   √öltimo an√°lisis: {summary['last_analysis']}")
        print(f"   Por tipo: {summary['by_type']}")
        print(f"   Por confianza: {summary['by_confidence']}")
        
        # 9. TEST DE M√öLTIPLES TIMEFRAMES
        print("\nüïê FASE 9: Test multi-timeframe...")
        
        timeframes = ["M5", "M15", "H1"]
        tf_results = {}
        
        for tf in timeframes:
            print(f"\n   Analizando {tf}...")
            start_tf = time.time()
            
            tf_patterns = detector.detect_patterns("EURUSD", tf, 3)
            tf_time = time.time() - start_tf
            
            tf_results[tf] = {
                'patterns': len(tf_patterns),
                'time': tf_time,
                'avg_strength': sum(p.strength for p in tf_patterns) / len(tf_patterns) if tf_patterns else 0
            }
            
            print(f"   ‚úÖ {tf}: {len(tf_patterns)} patrones en {tf_time:.3f}s")
        
        print(f"\nüìä RESULTADOS MULTI-TIMEFRAME:")
        for tf, result in tf_results.items():
            print(f"   {tf}: {result['patterns']} patrones, {result['avg_strength']:.1f}% avg strength")
        
        # 10. VALIDACI√ìN FINAL
        print("\n‚úÖ FASE 10: Validaci√≥n final...")
        
        total_success = True
        
        # Verificar performance
        if analysis_time <= 0.05:
            print("‚úÖ PERFORMANCE: Tiempo de an√°lisis dentro del target")
        else:
            print("‚ùå PERFORMANCE: Tiempo de an√°lisis excede target")
            total_success = False
        
        # Verificar funcionalidad
        if detector.is_initialized:
            print("‚úÖ INICIALIZACI√ìN: Detector correctamente inicializado")
        else:
            print("‚ùå INICIALIZACI√ìN: Detector no inicializado")
            total_success = False
        
        # Verificar detecci√≥n
        if len(patterns) > 0 or len(tf_results) > 0:
            print("‚úÖ DETECCI√ìN: Capacidad de detectar patrones confirmada")
        else:
            print("‚ö†Ô∏è  DETECCI√ìN: No se detectaron patrones en ning√∫n TF")
        
        # Verificar m√©tricas
        if metrics['total_analyses'] > 0:
            print("‚úÖ M√âTRICAS: Sistema de m√©tricas funcionando")
        else:
            print("‚ùå M√âTRICAS: Sistema de m√©tricas no funciona")
            total_success = False
        
        # RESULTADO FINAL
        print("\n" + "=" * 60)
        if total_success:
            print("üéâ RESULTADO: TEST COMPLETADO EXITOSAMENTE")
            print("‚úÖ Pattern Detector v6.0 Enterprise VALIDADO")
        else:
            print("‚ö†Ô∏è  RESULTADO: TEST COMPLETADO CON WARNINGS")
            print("üîß Revisar componentes marcados como ERROR")
        
        print("=" * 60)
        
        return total_success, patterns, metrics
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN TEST: {e}")
        import traceback
        traceback.print_exc()
        return False, [], {}


def test_specific_patterns():
    """Test espec√≠fico de patrones individuales"""
    
    print("\nüéØ TEST ESPEC√çFICO DE PATRONES")
    print("-" * 40)
    
    try:
        from core.analysis.pattern_detector import get_pattern_detector
        
        detector = get_pattern_detector({'enable_debug': True, 'min_confidence': 60.0})
        
        # Test Silver Bullet espec√≠fico
        print("\nü•à Testing Silver Bullet...")
        # Configurar para hora Silver Bullet
        current_hour = datetime.now().hour
        if 10 <= current_hour <= 11 or 14 <= current_hour <= 15:
            print("‚úÖ Ventana Silver Bullet activa")
        else:
            print("‚ÑπÔ∏è  Fuera de ventana Silver Bullet")
        
        # Test con datos simulados espec√≠ficos
        print("\nüìä Generando datos de prueba...")
        
        patterns = detector.detect_patterns("EURUSD", "M15", 2)
        
        pattern_types_found = [p.pattern_type.value for p in patterns]
        
        print(f"üé™ Patrones encontrados: {pattern_types_found}")
        
        # Verificar tipos espec√≠ficos
        expected_types = ['silver_bullet', 'judas_swing', 'liquidity_grab', 'optimal_trade_entry', 'order_block', 'fair_value_gap']
        
        for expected in expected_types:
            if expected in pattern_types_found:
                print(f"‚úÖ {expected.replace('_', ' ').title()}: DETECTADO")
            else:
                print(f"‚ÑπÔ∏è  {expected.replace('_', ' ').title()}: No detectado (normal seg√∫n condiciones)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test espec√≠fico: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Iniciando test completo del Pattern Detector...")
    
    # Test principal
    success, patterns, metrics = test_pattern_detector_integration()
    
    # Test espec√≠fico
    specific_success = test_specific_patterns()
    
    # Resumen final
    print(f"\nüìã RESUMEN FINAL:")
    print(f"   Test principal: {'‚úÖ PASS' if success else '‚ùå FAIL'}")
    print(f"   Test espec√≠fico: {'‚úÖ PASS' if specific_success else '‚ùå FAIL'}")
    print(f"   Patrones detectados: {len(patterns)}")
    print(f"   Tiempo promedio: {metrics.get('avg_analysis_time', 0):.3f}s")
    
    if success and specific_success:
        print("\nüéâ TODOS LOS TESTS PASARON")
        print("‚úÖ Pattern Detector v6.0 Enterprise LISTO PARA PRODUCCI√ìN")
    else:
        print("\n‚ö†Ô∏è  ALGUNOS TESTS FALLARON")
        print("üîß Revisar logs arriba para detalles")
