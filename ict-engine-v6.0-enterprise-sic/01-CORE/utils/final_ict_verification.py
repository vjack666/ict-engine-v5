#!/usr/bin/env python3
"""
üéØ VERIFICACI√ìN FINAL ICT - Confirmaci√≥n de funcionamiento √≥ptimo
===============================================================

Test final para confirmar que el ICT Engine v6.1.0 Enterprise est√°
funcionando de manera √≥ptima seg√∫n las leyes ICT institucionales.

- Verificaci√≥n de configuraci√≥n ICT
- Test de descarga con cantidades correctas
- Validaci√≥n de cumplimiento institucional
- Confirmaci√≥n de datos reales FundedNext

Autor: ICT Engine v6.1.0 Enterprise Team
Fecha: Agosto 2025
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

def final_ict_verification():
    """üéØ Verificaci√≥n final del sistema ICT √≥ptimo"""
    print("\n" + "="*70)
    print("üéØ VERIFICACI√ìN FINAL ICT ENGINE v6.0 ENTERPRISE")
    print("="*70)
    print("Confirmando funcionamiento √≥ptimo seg√∫n leyes ICT...")
    
    verification_results = {
        'downloader_config': False,
        'ict_optimal_download': False,
        'real_data_connection': False,
        'compliance_validation': False,
        'historical_coverage': False
    }
    
    try:
        print("\n1Ô∏è‚É£ Verificando configuraci√≥n ICT del downloader...")
        
        from core.data_management.advanced_candle_downloader import AdvancedCandleDownloader
        downloader = AdvancedCandleDownloader(
            config={'enable_debug': True, 'use_ict_optimal': True}
        )
        
        # Verificar configuraciones ICT espec√≠ficas
        expected_ict_configs = {
            'M15': {'optimal_bars': 10000, 'minimum_bars': 2000},
            'H1': {'optimal_bars': 5000, 'minimum_bars': 1000},
            'H4': {'optimal_bars': 2500, 'minimum_bars': 500},
            'D1': {'optimal_bars': 1000, 'minimum_bars': 200}
        }
        
        config_correct = True
        for tf, expected in expected_ict_configs.items():
            actual = downloader._get_ict_optimal_config(tf)
            if (actual['optimal_bars'] != expected['optimal_bars'] or 
                actual['minimum_bars'] != expected['minimum_bars']):
                config_correct = False
                break
        
        if config_correct:
            print("   ‚úÖ Configuraciones ICT correctas para todos los timeframes")
            verification_results['downloader_config'] = True
        else:
            print("   ‚ùå Configuraciones ICT incorrectas")
        
        print("\n2Ô∏è‚É£ Probando descarga ICT √≥ptima...")
        
        # Test con M15 (timeframe cr√≠tico ICT)
        result_m15 = downloader.download_candles(
            symbol="EURUSD",
            timeframe="M15",
            save_to_file=False,
            use_ict_optimal=True
        )
        
        if (result_m15.get('success') and 
            result_m15.get('data') is not None and
            len(result_m15['data']) >= 2000):  # M√≠nimo ICT para M15
            
            print(f"   ‚úÖ M15: {len(result_m15['data']):,} velas descargadas (‚â•2000 m√≠nimo ICT)")
            verification_results['ict_optimal_download'] = True
            
            # Verificar fuente de datos
            if result_m15.get('source') == 'mt5_direct':
                print("   ‚úÖ Fuente: MT5 directo (datos reales)")
                verification_results['real_data_connection'] = True
            else:
                print(f"   ‚ö†Ô∏è Fuente: {result_m15.get('source', 'desconocida')}")
        else:
            print(f"   ‚ùå M15: Solo {len(result_m15.get('data', [])):,} velas (insuficiente)")
        
        print("\n3Ô∏è‚É£ Verificando cumplimiento ICT...")
        
        if 'ict_compliance' in result_m15:
            compliance = result_m15['ict_compliance']
            if (compliance.get('compliant') and 
                compliance.get('analysis_quality') in ['PROFESSIONAL_GRADE', 'INSTITUTIONAL_GRADE']):
                print(f"   ‚úÖ Cumplimiento ICT: {compliance['status']} - {compliance['analysis_quality']}")
                verification_results['compliance_validation'] = True
            else:
                print(f"   ‚ùå No cumple est√°ndares ICT: {compliance.get('status', 'UNKNOWN')}")
        
        print("\n4Ô∏è‚É£ Verificando cobertura hist√≥rica...")
        
        # Verificar que tenemos datos de al menos 6 meses atr√°s para M15
        if result_m15.get('success') and result_m15.get('data') is not None:
            data = result_m15['data']
            oldest_date = data.index[0]
            newest_date = data.index[-1]
            coverage_days = (newest_date - oldest_date).days
            
            if coverage_days >= 150:  # ~5 meses m√≠nimo
                print(f"   ‚úÖ Cobertura hist√≥rica: {coverage_days} d√≠as ({oldest_date.strftime('%Y-%m-%d')} a {newest_date.strftime('%Y-%m-%d')})")
                verification_results['historical_coverage'] = True
            else:
                print(f"   ‚ö†Ô∏è Cobertura limitada: solo {coverage_days} d√≠as")
        
        print("\n5Ô∏è‚É£ Test r√°pido H4 (timeframe cr√≠tico ICT)...")
        
        result_h4 = downloader.download_candles(
            symbol="EURUSD",
            timeframe="H4",
            save_to_file=False,
            use_ict_optimal=True
        )
        
        if result_h4.get('success'):
            h4_bars = len(result_h4['data']) if result_h4.get('data') is not None else 0
            print(f"   ‚ÑπÔ∏è H4: {h4_bars:,} velas (m√≠nimo ICT: 500)")
            
            if h4_bars >= 500:
                print("   ‚úÖ H4 cumple m√≠nimo ICT")
            else:
                print("   ‚ö†Ô∏è H4 por debajo del m√≠nimo ICT")
        
        # Resumen final
        passed_checks = sum(verification_results.values())
        total_checks = len(verification_results)
        
        print(f"\nüìä RESUMEN VERIFICACI√ìN ICT:")
        print(f"   Checks pasados: {passed_checks}/{total_checks}")
        print(f"   Porcentaje: {(passed_checks/total_checks)*100:.1f}%")
        
        print(f"\nüìã DETALLES:")
        status_map = {True: "‚úÖ PASS", False: "‚ùå FAIL"}
        print(f"   Configuraci√≥n ICT: {status_map[verification_results['downloader_config']]}")
        print(f"   Descarga √≥ptima: {status_map[verification_results['ict_optimal_download']]}")
        print(f"   Datos reales MT5: {status_map[verification_results['real_data_connection']]}")
        print(f"   Cumplimiento ICT: {status_map[verification_results['compliance_validation']]}")
        print(f"   Cobertura hist√≥rica: {status_map[verification_results['historical_coverage']]}")
        
        if passed_checks >= 4:  # Al menos 4 de 5 checks
            print(f"\nüéâ SISTEMA ICT CERTIFICADO PARA TRADING INSTITUCIONAL")
            print(f"   El ICT Engine v6.1.0 Enterprise est√° funcionando √≥ptimamente")
            print(f"   Listo para an√°lisis de mercado seg√∫n leyes ICT")
            return True
        else:
            print(f"\n‚ö†Ô∏è SISTEMA ICT NECESITA OPTIMIZACI√ìN")
            print(f"   Revisar configuraci√≥n y conexi√≥n MT5")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN VERIFICACI√ìN ICT: {e}")
        import traceback
        traceback.print_exc()
        return False

def display_ict_optimal_summary():
    """üìã Mostrar resumen de configuraci√≥n ICT √≥ptima"""
    print("\n" + "="*70)
    print("üìã CONFIGURACI√ìN ICT √ìPTIMA - RESUMEN EJECUTIVO")
    print("="*70)
    
    print("""
üèõÔ∏è LEYES ICT IMPLEMENTADAS:
   - Market Structure Analysis con datos institucionales
   - Order Blocks detection en timeframes m√∫ltiples  
   - Fair Value Gaps identification autom√°tica
   - Liquidity analysis en H4, H1, M15, M5
   - Smart Money concepts aplicados

üìä CANTIDADES √ìPTIMAS DE VELAS POR TIMEFRAME:
   D1  (Diario):    1,000 velas (200 m√≠nimo) - An√°lisis macro
   H4  (4 horas):   2,500 velas (500 m√≠nimo) - Estructura semanal
   H1  (1 hora):    5,000 velas (1,000 m√≠nimo) - An√°lisis diario
   M15 (15 min):   10,000 velas (2,000 m√≠nimo) - Entradas precisas
   M5  (5 min):     5,000 velas (1,000 m√≠nimo) - Timing de entrada
   M1  (1 min):     2,000 velas (500 m√≠nimo) - Scalping institucional

üöÄ FUENTE DE DATOS:
   - FundedNext MT5 Terminal (datos institucionales reales)
   - Sin simulaciones ni datos falsos
   - Conexi√≥n directa a liquidez institucional
   - Spreads reales del mercado

‚úÖ CUMPLIMIENTO INSTITUCIONAL:
   - MINIMUM: Suficiente para an√°lisis b√°sico ICT
   - IDEAL: Bueno para trading profesional  
   - OPTIMAL: Excelente para an√°lisis institucional completo

üéØ PR√ìXIMOS PASOS:
   1. Ejecutar setup_ict_historical_data.py para descarga masiva
   2. Configurar alertas en timeframes cr√≠ticos (H4, H1, M15)
   3. Implementar detecci√≥n autom√°tica de Order Blocks
   4. Activar monitoreo de Fair Value Gaps
   5. Iniciar backtesting con datos hist√≥ricos reales
    """)

if __name__ == "__main__":
    print("üéØ ICT ENGINE v6.0 - VERIFICACI√ìN FINAL")
    print("=" * 70)
    
    # Mostrar configuraci√≥n √≥ptima
    display_ict_optimal_summary()
    
    # Ejecutar verificaci√≥n
    verification_passed = final_ict_verification()
    
    if verification_passed:
        print(f"\nüèÜ CERTIFICACI√ìN ICT ENGINE v6.0 ENTERPRISE")
        print(f"   ‚úÖ Sistema verificado y listo para trading institucional")
        print(f"   ‚úÖ Configuraci√≥n ICT √≥ptima implementada")
        print(f"   ‚úÖ Datos reales FundedNext MT5 conectados")
        print(f"   ‚úÖ Cumplimiento de leyes ICT validado")
        
        print(f"\nüöÄ RECOMENDACI√ìN:")
        print(f"   Ejecutar: python setup_ict_historical_data.py")
        print(f"   Para descarga masiva de a√±os de datos hist√≥ricos")
    else:
        print(f"\n‚ö†Ô∏è SISTEMA REQUIERE ATENCI√ìN")
        print(f"   Revisar conexi√≥n MT5 y configuraci√≥n ICT")
