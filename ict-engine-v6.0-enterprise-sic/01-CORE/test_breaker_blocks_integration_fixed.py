#!/usr/bin/env python3
"""
üß™ TEST BREAKER BLOCKS INTEGRATION - SIGUIENDO REGLA #7
=========================================================

Test completo para verificar que la integraci√≥n de Breaker Blocks v6.2 
en PatternDetector funciona correctamente despu√©s del fix de imports.

REGLA #7: TESTS PRIMERO - Si el test es correcto, el c√≥digo debe pasar
"""

import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# A√±adir path para imports
sys.path.append('.')

def test_breaker_blocks_integration_fixed():
    """üß™ Test completo de integraci√≥n Breaker Blocks v6.2"""
    
    print("üöÄ INICIANDO TEST BREAKER BLOCKS INTEGRATION v6.2")
    print("=" * 60)
    
    # 1. TEST IMPORT PATTERN DETECTOR
    print("\nüì¶ TEST 1: Import PatternDetector")
    try:
        from core.ict_engine.pattern_detector import ICTPatternDetector, BREAKER_BLOCKS_V62_AVAILABLE
        print("‚úÖ PatternDetector importado exitosamente")
        print(f"   BREAKER_BLOCKS_V62_AVAILABLE = {BREAKER_BLOCKS_V62_AVAILABLE}")
        if not BREAKER_BLOCKS_V62_AVAILABLE:
            print("‚ùå FALLO: Breaker Blocks v6.2 no est√° disponible")
            return False
    except Exception as e:
        print(f"‚ùå FALLO: Error importando PatternDetector: {e}")
        return False
    
    # 2. TEST CREACI√ìN DETECTOR
    print("\nüèóÔ∏è TEST 2: Creaci√≥n PatternDetector")
    try:
        detector = ICTPatternDetector()
        detector.symbol = "EURUSD"
        detector.timeframe = "M15"
        print("‚úÖ PatternDetector creado exitosamente")
    except Exception as e:
        print(f"‚ùå FALLO: Error creando detector: {e}")
        return False
    
    # 3. TEST DATOS SINT√âTICOS
    print("\nüìä TEST 3: Preparaci√≥n datos sint√©ticos")
    try:
        # Crear datos OHLCV sint√©ticos para test
        dates = pd.date_range(start='2024-01-01', periods=100, freq='15T')
        np.random.seed(42)  # Para reproducibilidad
        
        # Generar datos realistas EURUSD
        base_price = 1.0800
        price_changes = np.random.normal(0, 0.0005, 100).cumsum()
        
        data = []
        for i, date in enumerate(dates):
            price = base_price + price_changes[i]
            high = price + np.random.uniform(0.0001, 0.0005)
            low = price - np.random.uniform(0.0001, 0.0005)
            close = price + np.random.uniform(-0.0002, 0.0002)
            
            data.append({
                'timestamp': date,
                'open': price,
                'high': high,
                'low': low,
                'close': close,
                'volume': np.random.randint(100, 1000)
            })
        
        candles_df = pd.DataFrame(data)
        candles_df.set_index('timestamp', inplace=True)
        print(f"‚úÖ Datos sint√©ticos creados: {len(candles_df)} velas")
        print(f"   Rango de precios: {candles_df['low'].min():.5f} - {candles_df['high'].max():.5f}")
    except Exception as e:
        print(f"‚ùå FALLO: Error creando datos sint√©ticos: {e}")
        return False
    
    # 4. TEST DETECCI√ìN COMPLETA
    print("\nüîç TEST 4: Detecci√≥n completa de patterns")
    try:
        result = detector.detect_patterns(
            symbol="EURUSD",
            timeframe="M15",
            lookback_days=7
        )
        print("‚úÖ Detecci√≥n de patterns completada")
        print(f"   Order Blocks detectados: {len(result.order_blocks)}")
        print(f"   Fair Value Gaps detectados: {len(result.fair_value_gaps)}")
        print(f"   Total patterns: {result.total_patterns}")
    except Exception as e:
        print(f"‚ùå FALLO: Error en detecci√≥n de patterns: {e}")
        return False
    
    # 5. TEST M√âTODO BREAKER ESPEC√çFICO
    print("\nüí• TEST 5: M√©todo _detect_breaker_block espec√≠fico")
    try:
        # Test directo del m√©todo breaker
        breaker_result = detector._detect_breaker_block(
            candles=candles_df,
            candle_index=50,  # Vela del medio
            market_structure=None
        )
        
        if breaker_result is not None:
            print(f"‚úÖ Breaker Block detectado: {breaker_result.ob_type}")
            print(f"   Precio high: {breaker_result.high_price:.5f}")
            print(f"   Precio low: {breaker_result.low_price:.5f}")
            print(f"   Confianza: {breaker_result.probability:.1%}")
        else:
            print("‚ÑπÔ∏è No se detect√≥ Breaker Block (comportamiento esperado con datos sint√©ticos)")
            
        print("‚úÖ M√©todo _detect_breaker_block funciona correctamente")
    except Exception as e:
        print(f"‚ùå FALLO: Error en m√©todo _detect_breaker_block: {e}")
        return False
    
    # 6. TEST FACTORY FUNCTION
    print("\nüè≠ TEST 6: Factory function create_high_performance_breaker_detector_v62")
    try:
        from core.ict_engine.advanced_patterns.breaker_blocks_enterprise_v62 import create_high_performance_breaker_detector_v62
        
        breaker_detector = create_high_performance_breaker_detector_v62("EURUSD", "M15")
        print("‚úÖ Factory function funciona correctamente")
        print(f"   Detector type: {type(breaker_detector).__name__}")
        
        # Test m√©todo detect_breaker_blocks_enterprise
        empty_obs = []
        breaker_signals = breaker_detector.detect_breaker_blocks_enterprise(
            data=candles_df,
            order_blocks=empty_obs,
            symbol="EURUSD",
            timeframe="M15"
        )
        print(f"‚úÖ M√©todo detect_breaker_blocks_enterprise funciona: {len(breaker_signals)} signals")
        
    except Exception as e:
        print(f"‚ùå FALLO: Error en factory function: {e}")
        return False
    
    # 7. RESUMEN FINAL
    print("\n" + "=" * 60)
    print("üéâ RESUMEN FINAL TEST BREAKER BLOCKS INTEGRATION")
    print("=" * 60)
    print("‚úÖ Import PatternDetector: PASSED")
    print("‚úÖ BREAKER_BLOCKS_V62_AVAILABLE: TRUE")
    print("‚úÖ Creaci√≥n detector: PASSED")
    print("‚úÖ Datos sint√©ticos: PASSED") 
    print("‚úÖ Detecci√≥n completa: PASSED")
    print("‚úÖ M√©todo _detect_breaker_block: PASSED")
    print("‚úÖ Factory function: PASSED")
    print("\nüèÜ TODOS LOS TESTS PASADOS - INTEGRACI√ìN EXITOSA")
    
    return True

if __name__ == "__main__":
    success = test_breaker_blocks_integration_fixed()
    if success:
        print("\nüéØ CONCLUSI√ìN: BREAKER BLOCKS v6.2 INTEGRACI√ìN COMPLETADA ‚úÖ")
        print("   El pendiente del lunes ha sido resuelto exitosamente")
    else:
        print("\n‚ùå FALLO: Integraci√≥n no completada")
    
    exit(0 if success else 1)
