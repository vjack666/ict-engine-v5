#!/usr/bin/env python3
"""
üß™ TEST DIAGN√ìSTICO UNIFIED_MEMORY_SYSTEM_CREATE - v6.1
========================================================
‚úÖ REGLA #7: Test primero para diagnosticar conexi√≥n
‚úÖ REGLA #8: Testing cr√≠tico con SIC/SLUC

Verifica espec√≠ficamente por qu√© UnifiedMemorySystem se crea pero no se conecta.
"""

import sys
from pathlib import Path

# Configurar PYTHONPATH
current_dir = Path(__file__).parent.parent
sys.path.insert(0, str(current_dir))

try:
    from core.smart_trading_logger import log_trading_decision_smart_v6
    from core.ict_engine.pattern_detector import ICTPatternDetector
    from core.analysis.unified_memory_system import get_unified_memory_system
    
    # Verificar disponibilidad
    try:
        from core.ict_engine.pattern_detector import UNIFIED_MEMORY_SYSTEM_AVAILABLE
    except ImportError:
        UNIFIED_MEMORY_SYSTEM_AVAILABLE = False
    
    print("‚úÖ Imports exitosos")
except ImportError as e:
    print(f"‚ùå Error de import: {e}")
    sys.exit(1)

def diagnose_unified_memory_system_connection():
    """
    üîç Diagn√≥stico espec√≠fico de conexi√≥n UnifiedMemorySystem
    """
    print("üîç DIAGN√ìSTICO UNIFIED_MEMORY_SYSTEM_CREATE")
    print("=" * 60)
    
    log_trading_decision_smart_v6("DIAGNOSTIC_START", {
        "test": "UnifiedMemorySystem connection diagnostic",
        "purpose": "Verificar por qu√© se crea pero no se conecta"
    })
    
    # ‚úÖ PASO 1: Verificar disponibilidad del m√≥dulo
    print(f"\\nüß™ PASO 1: M√≥dulo UnifiedMemorySystem disponible: {UNIFIED_MEMORY_SYSTEM_AVAILABLE}")
    
    # ‚úÖ PASO 2: Crear instancia directa
    print("\\nüß™ PASO 2: Creando instancia directa...")
    try:
        direct_instance = get_unified_memory_system()
        print(f"   ‚úÖ Instancia directa creada: {type(direct_instance)}")
        print(f"   ‚úÖ ID de instancia: {id(direct_instance)}")
        print(f"   ‚úÖ Tiene market_context: {hasattr(direct_instance, 'market_context')}")
        print(f"   ‚úÖ Tiene confidence_evaluator: {hasattr(direct_instance, 'confidence_evaluator')}")
    except Exception as e:
        print(f"   ‚ùå Error creando instancia directa: {e}")
        return False
    
    # ‚úÖ PASO 3: Crear ICTPatternDetector y verificar conexi√≥n
    print("\\nüß™ PASO 3: Creando ICTPatternDetector...")
    try:
        detector = ICTPatternDetector()
        print(f"   ‚úÖ ICTPatternDetector creado: {type(detector)}")
        
        # Verificar la variable de memoria
        print(f"   üîç _unified_memory_system type: {type(detector._unified_memory_system)}")
        print(f"   üîç _unified_memory_system is None: {detector._unified_memory_system is None}")
        print(f"   üîç _unified_memory_system ID: {id(detector._unified_memory_system) if detector._unified_memory_system else 'None'}")
        
        # Verificar si son la misma instancia
        if detector._unified_memory_system:
            same_instance = id(detector._unified_memory_system) == id(direct_instance)
            print(f"   üîç Misma instancia que directa: {same_instance}")
        
    except Exception as e:
        print(f"   ‚ùå Error creando ICTPatternDetector: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # ‚úÖ PASO 4: Verificar m√©todos memory-aware
    print("\\nüß™ PASO 4: Verificando m√©todos memory-aware...")
    methods_to_check = [
        'detect_bos_with_memory',
        'detect_choch_with_memory', 
        '_enhance_with_memory',
        '_is_known_false_positive'
    ]
    
    for method in methods_to_check:
        has_method = hasattr(detector, method)
        print(f"   - {method}: {'‚úÖ' if has_method else '‚ùå'}")
    
    # ‚úÖ PASO 5: Test funcional de memoria
    print("\\nüß™ PASO 5: Test funcional b√°sico...")
    try:
        if detector._unified_memory_system:
            # Test b√°sico del sistema de memoria
            test_insight = detector._unified_memory_system.get_historical_insight("test", "M15")
            print(f"   ‚úÖ get_historical_insight funciona: {type(test_insight)}")
            
            # Test de evaluaci√≥n de confianza
            test_data = {'confidence': 0.5, 'strength': 0.7}
            confidence_result = detector._unified_memory_system.confidence_evaluator.assess_market_confidence(test_data)
            print(f"   ‚úÖ assess_market_confidence funciona: {confidence_result}")
            
        else:
            print("   ‚ùå No se puede hacer test funcional - sistema no conectado")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è Error en test funcional: {e}")
    
    # ‚úÖ RESULTADO FINAL
    memory_connected = detector._unified_memory_system is not None
    all_methods_present = all(hasattr(detector, method) for method in methods_to_check)
    
    print(f"\\nüéØ RESULTADO DIAGN√ìSTICO:")
    print(f"   - M√≥dulo disponible: {'‚úÖ' if UNIFIED_MEMORY_SYSTEM_AVAILABLE else '‚ùå'}")
    print(f"   - Instancia directa: ‚úÖ")
    print(f"   - UnifiedMemorySystem conectado: {'‚úÖ' if memory_connected else '‚ùå'}")
    print(f"   - M√©todos memory-aware: {'‚úÖ' if all_methods_present else '‚ùå'}")
    
    success = UNIFIED_MEMORY_SYSTEM_AVAILABLE and memory_connected and all_methods_present
    
    log_trading_decision_smart_v6("DIAGNOSTIC_RESULT", {
        "module_available": UNIFIED_MEMORY_SYSTEM_AVAILABLE,
        "memory_connected": memory_connected,
        "methods_present": all_methods_present,
        "diagnostic_success": success
    })
    
    if success:
        print("\\nüéâ DIAGN√ìSTICO: FASE 3 FUNCIONAL")
    else:
        print("\\n‚ùå DIAGN√ìSTICO: PROBLEMAS IDENTIFICADOS")
        
        if not memory_connected:
            print("   üîß SOLUCI√ìN: Verificar inicializaci√≥n en _initialize_components")
        if not all_methods_present:
            print("   üîß SOLUCI√ìN: Verificar que m√©todos memory-aware est√©n implementados")
    
    return success

def main():
    """
    ‚úÖ REGLA #8: Main con configuraci√≥n PowerShell y SIC/SLUC
    """
    print("üß™ DIAGN√ìSTICO DETALLADO - UNIFIED_MEMORY_SYSTEM_CREATE")
    print("=" * 70)
    
    success = diagnose_unified_memory_system_connection()
    
    if success:
        print("\\n‚úÖ DIAGN√ìSTICO COMPLETADO - SISTEMA FUNCIONAL")
    else:
        print("\\n‚ùå DIAGN√ìSTICO COMPLETADO - REQUIERE CORRECCIONES")

if __name__ == "__main__":
    main()
