#!/usr/bin/env python3
"""
üîß TEST DIAGN√ìSTICO - Dashboard ICT Regla #10
================================================================================
Test paso a paso para identificar el problema del dashboard
================================================================================
"""

import sys
import os
from pathlib import Path

print("üîß DIAGN√ìSTICO DASHBOARD ICT - REGLA #10")
print("=" * 60)

# Test 1: Verificar Python y ubicaci√≥n
print("\n1Ô∏è‚É£ VERIFICANDO PYTHON Y UBICACI√ìN")
print(f"   Python version: {sys.version}")
print(f"   Directorio actual: {os.getcwd()}")
print(f"   Archivo test: {__file__}")

# Test 2: Verificar Rich
print("\n2Ô∏è‚É£ VERIFICANDO RICH")
try:
    from rich.console import Console
    from rich.table import Table
    from rich.live import Live
    from rich.panel import Panel
    console = Console()
    console.print("   ‚úÖ Rich imports OK")
except Exception as e:
    print(f"   ‚ùå Error Rich: {e}")
    sys.exit(1)

# Test 3: Verificar paths del sistema
print("\n3Ô∏è‚É£ VERIFICANDO PATHS DEL SISTEMA")
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
data_dir = parent_dir / "data" / "candles"

print(f"   Directorio actual: {current_dir}")
print(f"   Directorio padre: {parent_dir}")
print(f"   Directorio datos: {data_dir}")
print(f"   Datos existe: {data_dir.exists()}")

if data_dir.exists():
    csv_files = list(data_dir.glob("*.csv"))
    print(f"   Archivos CSV encontrados: {len(csv_files)}")
    if len(csv_files) > 0:
        print(f"   Ejemplo: {csv_files[0].name}")
else:
    print("   ‚ö†Ô∏è Directorio de datos no encontrado")

# Test 4: Verificar backtester
print("\n4Ô∏è‚É£ VERIFICANDO BACKTESTER")
try:
    sys.path.append(str(current_dir))
    print(f"   Path a√±adido: {current_dir}")
    
    # Verificar si existe el archivo
    backtester_file = current_dir / "modular_ict_backtester.py"
    print(f"   Archivo backtester: {backtester_file}")
    print(f"   Existe: {backtester_file.exists()}")
    
    if backtester_file.exists():
        # Intentar importar
        from modular_ict_backtester import ModularICTBacktester, ModuleResult
        print("   ‚úÖ Import backtester OK")
        
        # Verificar si se puede instanciar
        data_path = str(data_dir) if data_dir.exists() else "test_path"
        print(f"   Probando instanciar con path: {data_path}")
        
        backtester = ModularICTBacktester(data_path=data_path)
        print("   ‚úÖ Instanciaci√≥n backtester OK")
        
    else:
        print("   ‚ùå Archivo modular_ict_backtester.py no encontrado")
        
except Exception as e:
    print(f"   ‚ùå Error backtester: {e}")
    import traceback
    print(f"   Traceback: {traceback.format_exc()}")

# Test 5: Test b√°sico de Rich display
print("\n5Ô∏è‚É£ TEST B√ÅSICO RICH DISPLAY")
try:
    console = Console()
    
    # Test tabla b√°sica
    table = Table(show_header=False, box=None)
    table.add_row("üéØ ORDER_BLOCKS", "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", "Precisi√≥n: 84.2%", "2,596 patterns", "‚úÖ")
    
    console.print("\n   Test tabla:")
    console.print(table)
    
    # Test panel
    panel = Panel.fit("üéØ ICT ENGINE - REGLA #10", style="bright_cyan")
    console.print("\n   Test panel:")
    console.print(panel)
    
    print("\n   ‚úÖ Rich display test OK")
    
except Exception as e:
    print(f"   ‚ùå Error Rich display: {e}")

# Test 6: Test threading b√°sico
print("\n6Ô∏è‚É£ TEST THREADING B√ÅSICO")
try:
    import threading
    import time
    
    def test_thread():
        time.sleep(1)
        print("   ‚úÖ Thread ejecutado OK")
    
    thread = threading.Thread(target=test_thread)
    thread.daemon = True
    thread.start()
    thread.join(timeout=2)
    
    if thread.is_alive():
        print("   ‚ö†Ô∏è Thread a√∫n ejecut√°ndose")
    else:
        print("   ‚úÖ Threading test OK")
        
except Exception as e:
    print(f"   ‚ùå Error threading: {e}")

# Test 7: Test contextlib (para silenciar output)
print("\n7Ô∏è‚É£ TEST CONTEXTLIB")
try:
    import contextlib
    from io import StringIO
    
    # Test redirect stdout
    with contextlib.redirect_stdout(StringIO()):
        print("Este mensaje debe estar silenciado")
    
    print("   ‚úÖ Contextlib test OK")
    
except Exception as e:
    print(f"   ‚ùå Error contextlib: {e}")

# Test 8: Test escritura de archivo
print("\n8Ô∏è‚É£ TEST ESCRITURA REPORTE")
try:
    import json
    from datetime import datetime
    
    reports_dir = parent_dir / "test_reports"
    reports_dir.mkdir(exist_ok=True)
    
    test_data = {
        "test": "diagn√≥stico",
        "timestamp": datetime.now().isoformat(),
        "status": "OK"
    }
    
    test_file = reports_dir / "test_diagnostico.json"
    with open(test_file, 'w', encoding='utf-8') as f:
        json.dump(test_data, f, indent=2)
    
    print(f"   ‚úÖ Archivo test creado: {test_file}")
    
except Exception as e:
    print(f"   ‚ùå Error escritura: {e}")

print("\n" + "=" * 60)
print("üèÅ DIAGN√ìSTICO COMPLETADO")

# Resumen final
print("\nüìã RESUMEN:")
print("   - Si todos los tests son ‚úÖ, el dashboard deber√≠a funcionar")
print("   - Si hay ‚ùå, esos son los problemas a resolver")
print("   - Revisa los errores espec√≠ficos arriba")

print(f"\nüïí Test completado: {datetime.now()}")
