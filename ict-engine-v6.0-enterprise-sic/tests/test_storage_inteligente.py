#!/usr/bin/env python3
"""
üóÑÔ∏è TEST STORAGE INTELIGENTE - Verificaci√≥n del sistema de almacenamiento
=======================================================================

Test para verificar que el sistema de almacenamiento inteligente funciona
correctamente seg√∫n la configuraci√≥n autom√°tica y las necesidades ICT.

Funcionalidades probadas:
- Carga autom√°tica de configuraci√≥n de storage
- Decisiones inteligentes de almacenamiento por timeframe
- Verificaci√≥n de archivos guardados
- Integraci√≥n con descarga ICT √≥ptima

Autor: ICT Engine v6.0 Enterprise Team
Fecha: Agosto 2025
"""

import sys
import os
from pathlib import Path
from datetime import datetime
import json

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

def test_storage_configuration():
    """üß™ Test: Configuraci√≥n de almacenamiento"""
    print("\n" + "="*70)
    print("üóÑÔ∏è TEST STORAGE INTELIGENTE v6.0")
    print("="*70)
    
    try:
        print("\nüìã 1. Verificando configuraci√≥n de storage...")
        
        # Verificar que existe el archivo de configuraci√≥n
        config_file = Path("config/storage_config.json")
        if config_file.exists():
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            storage_config = config_data.get('storage_config', {})
            downloader_config = config_data.get('downloader_config', {})
            
            print(f"‚úÖ Configuraci√≥n cargada:")
            print(f"   Modo: {storage_config.get('mode', 'UNKNOWN')}")
            print(f"   Descripci√≥n: {storage_config.get('description', 'N/A')}")
            print(f"   Guardar por defecto: {downloader_config.get('save_to_file_default', False)}")
            print(f"   Cache habilitado: {downloader_config.get('cache_enabled', False)}")
            print(f"   L√≠mite cache: {downloader_config.get('max_cache_mb', 0)} MB")
        else:
            print("‚ùå No se encontr√≥ archivo de configuraci√≥n de storage")
            return False
        
        print("\nüèóÔ∏è 2. Inicializando downloader con storage autom√°tico...")
        
        from core.data_management.advanced_candle_downloader import AdvancedCandleDownloader
        downloader = AdvancedCandleDownloader(
            config={'enable_debug': True}
        )
        print("‚úÖ Downloader inicializado con configuraci√≥n autom√°tica")
        
        print("\nüß† 3. Probando l√≥gica de decisi√≥n de almacenamiento...")
        
        # Test de decisiones autom√°ticas
        test_cases = [
            ('EURUSD', 'M15'),
            ('EURUSD', 'H1'), 
            ('EURUSD', 'H4'),
            ('EURUSD', 'M5'),
            ('XAUUSD', 'H4'),
            ('GBPUSD', 'M1')
        ]
        
        decisions = {}
        for symbol, timeframe in test_cases:
            if hasattr(downloader, '_should_save_to_file'):
                should_save = downloader._should_save_to_file(timeframe, symbol)
                decisions[f"{symbol}_{timeframe}"] = should_save
                decision_text = "üíæ GUARDAR" if should_save else "üß† MEMORIA"
                print(f"   {symbol} {timeframe}: {decision_text}")
            else:
                print(f"   {symbol} {timeframe}: ‚ùå M√©todo no disponible")
        
        print("\nüì• 4. Test de descarga con storage autom√°tico...")
        
        # Test de descarga real
        result = downloader.download_candles(
            symbol="EURUSD",
            timeframe="M15",
            save_to_file=None,  # Usar decisi√≥n autom√°tica
            use_ict_optimal=True
        )
        
        print(f"\nüìä RESULTADO DESCARGA:")
        print(f"   Success: {result.get('success', False)}")
        print(f"   Message: {result.get('message', 'N/A')}")
        
        if result.get('success'):
            # Verificar informaci√≥n de storage
            storage_info = result.get('storage_info', {})
            print(f"\nüóÑÔ∏è INFORMACI√ìN DE STORAGE:")
            print(f"   Guardado en archivo: {storage_info.get('saved_to_file', 'N/A')}")
            print(f"   Modo de storage: {storage_info.get('storage_mode', 'N/A')}")
            print(f"   Decisi√≥n: {storage_info.get('storage_decision', 'N/A')}")
            
            # Verificar si se cre√≥ archivo (si deber√≠a)
            if storage_info.get('saved_to_file'):
                data_dir = Path("data/candles")
                if data_dir.exists():
                    csv_files = list(data_dir.glob("EURUSD_M15_*.csv"))
                    if csv_files:
                        latest_file = max(csv_files, key=lambda p: p.stat().st_mtime)
                        file_size = latest_file.stat().st_size
                        print(f"   Archivo creado: {latest_file.name}")
                        print(f"   Tama√±o: {file_size:,} bytes ({file_size/1024:.1f} KB)")
                    else:
                        print(f"   ‚ö†Ô∏è No se encontraron archivos CSV recientes")
                else:
                    print(f"   ‚ö†Ô∏è Directorio de datos no existe")
        
        print("\nüìà 5. Verificando m√©tricas de storage...")
        
        if hasattr(downloader, 'get_performance_report'):
            perf_report = downloader.get_performance_report()
            print(f"   Cache stats: {perf_report.get('cache_stats', {})}")
            print(f"   SIC integration: {perf_report.get('sic_integration_active', False)}")
        
        print("\n‚úÖ TEST STORAGE INTELIGENTE COMPLETADO")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de storage: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_storage_modes():
    """üîß Test: Diferentes modos de storage"""
    print("\n" + "="*50)
    print("üîß TEST MODOS DE STORAGE")
    print("="*50)
    
    # Simulaci√≥n de diferentes configuraciones
    test_configs = {
        'MEMORY_ONLY': {
            'mode': 'MEMORY_ONLY',
            'expected_save': {'M15': False, 'H4': False, 'H1': False}
        },
        'CACHE_SMART': {
            'mode': 'CACHE_SMART', 
            'critical_timeframes': ['H4', 'H1', 'M15'],
            'expected_save': {'M15': True, 'H4': True, 'H1': True, 'M5': False}
        },
        'FULL_STORAGE': {
            'mode': 'FULL_STORAGE',
            'expected_save': {'M15': True, 'H4': True, 'H1': True, 'M5': True, 'M1': True}
        }
    }
    
    try:
        from core.data_management.advanced_candle_downloader import AdvancedCandleDownloader
        
        for mode_name, config in test_configs.items():
            print(f"\nüß™ Probando modo: {mode_name}")
            
            # Crear downloader con configuraci√≥n simulada
            downloader = AdvancedCandleDownloader()
            downloader._storage_config = config  # Simular configuraci√≥n
            
            expected = config['expected_save']
            all_correct = True
            
            for timeframe, expected_save in expected.items():
                if hasattr(downloader, '_should_save_to_file'):
                    actual_save = downloader._should_save_to_file(timeframe, 'EURUSD')
                    match = actual_save == expected_save
                    
                    status = "‚úÖ" if match else "‚ùå"
                    print(f"   {timeframe}: Esperado={expected_save}, Actual={actual_save} {status}")
                    
                    if not match:
                        all_correct = False
                else:
                    print(f"   {timeframe}: ‚ùå M√©todo no disponible")
                    all_correct = False
            
            if all_correct:
                print(f"   ‚úÖ Modo {mode_name} funciona correctamente")
            else:
                print(f"   ‚ùå Modo {mode_name} tiene errores")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando modos de storage: {e}")
        return False

def verify_data_directory():
    """üìÅ Verificar estructura de directorios de datos"""
    print("\n" + "="*50)
    print("üìÅ VERIFICACI√ìN DIRECTORIO DE DATOS")
    print("="*50)
    
    # Verificar estructura de directorios
    data_paths = [
        "data/candles",
        "data/reports", 
        "config"
    ]
    
    for path_str in data_paths:
        path = Path(path_str)
        if path.exists():
            if path.is_dir():
                files = list(path.glob("*"))
                print(f"‚úÖ {path_str}: {len(files)} archivos")
                
                # Mostrar archivos recientes si existen
                if files:
                    recent_files = sorted(files, key=lambda p: p.stat().st_mtime, reverse=True)[:3]
                    for f in recent_files:
                        size = f.stat().st_size
                        print(f"   - {f.name} ({size:,} bytes)")
            else:
                print(f"‚ö†Ô∏è {path_str}: Es archivo, no directorio")
        else:
            print(f"‚ùå {path_str}: No existe")
    
    return True

if __name__ == "__main__":
    print("üóÑÔ∏è ICT ENGINE v6.0 - TEST STORAGE INTELIGENTE")
    print("=" * 70)
    
    # Ejecutar tests
    test1_passed = test_storage_configuration()
    test2_passed = test_storage_modes()
    verify_data_directory()
    
    print(f"\nüèÅ RESUMEN FINAL:")
    print(f"   Test configuraci√≥n storage: {'‚úÖ PASS' if test1_passed else '‚ùå FAIL'}")
    print(f"   Test modos de storage: {'‚úÖ PASS' if test2_passed else '‚ùå FAIL'}")
    
    if test1_passed and test2_passed:
        print(f"\nüéâ SISTEMA DE STORAGE INTELIGENTE: ‚úÖ FUNCIONANDO")
        print(f"   El almacenamiento autom√°tico est√° operativo")
        print(f"   Las decisiones se toman seg√∫n configuraci√≥n ICT")
    else:
        print(f"\n‚ö†Ô∏è SISTEMA DE STORAGE NECESITA REVISI√ìN")
