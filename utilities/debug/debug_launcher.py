# üîß DEBUG LAUNCHER - DEVTOOLS F12 SUPPORT
# Sprint 1.1 - Debug System & Clean Code

import sys
import os
from pathlib import Path
import asyncio
from datetime import datetime
import argparse
import json

# üìÅ Configurar path del proyecto
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from textual.app import App
from textual.binding import Binding
from textual.widgets import Static, Header, Footer
from textual.containers import Container
from rich.console import Console
from rich.text import Text
from rich.panel import Panel
from rich.table import Table

# üéØ Import del sistema principal
try:
    from dashboard.dashboard_definitivo import SentinelDashboardDefinitivo as SentinelDashboard
    from sistema.logging_interface import enviar_senal_log
except ImportError as e:
    print(f"‚ùå Error importing main system: {e}")
    print("üîß Make sure you're running from the correct directory")
    sys.exit(1)

class DebugLauncher(App):
    """
    Launcher profesional con DevTools F12 support y debugging avanzado
    """

    CSS = """
    Screen {
        background: $surface;
    }

    .debug_panel {
        background: $panel;
        border: solid $accent;
        margin: 1;
        padding: 1;
    }

    .launch_buttons {
        background: $surface-lighten-1;
        border: solid $success;
        margin: 1;
        padding: 2;
    }

    .system_info {
        background: $surface-darken-1;
        border: solid $warning;
        margin: 1;
        padding: 1;
    }
    """

    TITLE = "üîß SENTINEL DEBUG LAUNCHER - DevTools Professional"
    SUB_TITLE = "Debug System & Clean Code - Sprint 1.1"

    BINDINGS = [
        Binding("f12", "toggle_devtools", "üîß DevTools", show=True),
        Binding("1", "launch_normal", "üöÄ Launch Normal", show=True),
        Binding("2", "launch_debug", "üêõ Launch Debug", show=True),
        Binding("3", "launch_console", "üíª Launch Console", show=True),
        Binding("4", "run_diagnostics", "üîç Diagnostics", show=True),
        Binding("s", "screenshot", "üì∏ Screenshot", show=True),
        Binding("l", "view_logs", "üìã View Logs", show=True),
        Binding("q", "quit", "‚ùå Exit", show=True),
    ]

    def __init__(self):
        super().__init__()
        self.console = Console()
        self.devtools_active = False
        self.system_diagnostics = {}

        # üîß Debug configuration
        self.debug_config = {
            'devtools_enabled': True,
            'console_mode': False,
            'verbose_logging': False,
            'screenshot_enabled': True,
            'performance_monitoring': True
        }

    def compose(self):
        """Composici√≥n de la interfaz de debug"""
        yield Header()

        with Container(classes="debug_panel"):
            yield Static(self.render_launcher_panel(), id="launcher_display")

        yield Footer()

    def on_mount(self):
        """Configuraci√≥n inicial del launcher"""
        self.set_interval(2.0, self.update_system_info)
        self.run_system_diagnostics()
        self.notify("üîß Debug Launcher iniciado - F12 para DevTools")

    def render_launcher_panel(self) -> Panel:
        """Renderiza el panel principal del launcher"""

        # üèóÔ∏è Informaci√≥n del sistema
        system_info = self._get_system_info()

        # üìä Estado de diagn√≥sticos
        diagnostics_info = self._get_diagnostics_info()

        # üéØ Panel combinado
        content = Text()

        # üîß Header con informaci√≥n clave
        content.append("üîß SENTINEL DEBUG LAUNCHER v1.0\n\n", style="bold cyan")
        content.append(f"üìä Sistema: {system_info['status']}\n", style="green")
        content.append(f"üêõ Debug Mode: {'‚úÖ ACTIVO' if self.devtools_active else '‚≠ï INACTIVO'}\n", style="yellow" if self.devtools_active else "dim white")
        content.append(f"üì∏ Screenshots: {'‚úÖ HABILITADO' if self.debug_config['screenshot_enabled'] else '‚ùå DESHABILITADO'}\n", style="green")
        content.append(f"‚è∞ √öltima actualizaci√≥n: {datetime.now().strftime('%H:%M:%S')}\n\n", style="dim cyan")

        # üöÄ Opciones de launch
        content.append("üöÄ OPCIONES DE LANZAMIENTO:\n\n", style="bold blue")
        content.append("1Ô∏è‚É£  Launch Normal     - Modo producci√≥n est√°ndar\n", style="white")
        content.append("2Ô∏è‚É£  Launch Debug      - Modo debug con logging verbose\n", style="yellow")
        content.append("3Ô∏è‚É£  Launch Console    - Modo consola para desarrollo\n", style="cyan")
        content.append("4Ô∏è‚É£  Run Diagnostics  - Ejecutar diagn√≥sticos del sistema\n", style="magenta")

        content.append("\nüîß HERRAMIENTAS DE DEBUG:\n\n", style="bold green")
        content.append("F12  DevTools         - Activar/desactivar herramientas de desarrollo\n", style="white")
        content.append("S    Screenshot       - Capturar screenshot del sistema\n", style="white")
        content.append("L    View Logs        - Ver logs recientes del sistema\n", style="white")

        # üìä Diagn√≥sticos del sistema
        if self.system_diagnostics:
            content.append(f"\nüìä DIAGN√ìSTICOS DEL SISTEMA:\n\n", style="bold magenta")
            content.append(f"‚úÖ Imports: {self.system_diagnostics.get('imports_ok', 'N/A')}\n", style="green")
            content.append(f"üìÅ Paths: {self.system_diagnostics.get('paths_ok', 'N/A')}\n", style="green")
            content.append(f"üîß Config: {self.system_diagnostics.get('config_ok', 'N/A')}\n", style="green")
            content.append(f"üìã Logs: {self.system_diagnostics.get('logs_ok', 'N/A')}\n", style="green")

        return Panel(
            content,
            title="üîß [bold cyan]DEBUG LAUNCHER PROFESSIONAL[/bold cyan]",
            subtitle=f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            border_style="bright_cyan",
            padding=(1, 2)
        )

    def _get_system_info(self) -> dict:
        """Obtiene informaci√≥n del sistema"""
        return {
            'status': 'OPERATIVO',
            'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            'platform': sys.platform,
            'cwd': os.getcwd(),
            'project_root': str(project_root)
        }

    def _get_diagnostics_info(self) -> dict:
        """Obtiene informaci√≥n de diagn√≥sticos"""
        return {
            'last_run': datetime.now().strftime('%H:%M:%S'),
            'status': 'COMPLETO' if self.system_diagnostics else 'PENDIENTE'
        }

    def run_system_diagnostics(self):
        """Ejecuta diagn√≥sticos completos del sistema"""
        diagnostics = {}

        # ‚úÖ Verificar imports cr√≠ticos
        try:
            from dashboard.dashboard_definitivo import SentinelDashboardDefinitivo as SentinelDashboard
            from sistema.logging_interface import enviar_senal_log
            diagnostics['imports_ok'] = True
        except ImportError as e:
            diagnostics['imports_ok'] = f"ERROR: {e}"

        # üìÅ Verificar paths cr√≠ticos
        critical_paths = [
            project_root / "dashboard",
            project_root / "core",
            project_root / "sistema",
            project_root / "config"
        ]

        paths_status = []
        for path in critical_paths:
            if path.exists():
                paths_status.append(f"‚úÖ {path.name}")
            else:
                paths_status.append(f"‚ùå {path.name}")

        diagnostics['paths_ok'] = " | ".join(paths_status)

        # üîß Verificar configuraci√≥n
        try:
            config_files = list(project_root.glob("**/*.json"))
            diagnostics['config_ok'] = f"{len(config_files)} archivos encontrados"
        except Exception as e:
            diagnostics['config_ok'] = f"ERROR: {e}"

        # üìã Verificar logs
        try:
            log_files = list(project_root.glob("**/logs/**/*.log"))
            diagnostics['logs_ok'] = f"{len(log_files)} logs encontrados"
        except Exception as e:
            diagnostics['logs_ok'] = f"ERROR: {e}"

        self.system_diagnostics = diagnostics

        # üîÑ Actualizar display
        try:
            launcher_display = self.query_one("#launcher_display", Static)
            launcher_display.update(self.render_launcher_panel())
        except:
            pass

    def update_system_info(self):
        """Actualiza informaci√≥n del sistema cada 2 segundos"""
        try:
            launcher_display = self.query_one("#launcher_display", Static)
            launcher_display.update(self.render_launcher_panel())
        except:
            pass

    # üéÆ ACCIONES DE LAUNCHER

    def action_toggle_devtools(self):
        """Toggle DevTools F12"""
        self.devtools_active = not self.devtools_active
        status = "ACTIVADO" if self.devtools_active else "DESACTIVADO"

        if self.devtools_active:
            # üîß Configurar modo debug
            os.environ['TEXTUAL_DEBUG'] = '1'
            os.environ['TEXTUAL_LOG'] = '1'
            self.debug_config['verbose_logging'] = True
            self.notify("üîß DevTools ACTIVADO - Logging verbose habilitado", timeout=3)
        else:
            # üîï Desactivar modo debug
            os.environ.pop('TEXTUAL_DEBUG', None)
            os.environ.pop('TEXTUAL_LOG', None)
            self.debug_config['verbose_logging'] = False
            self.notify("üîï DevTools DESACTIVADO - Modo normal", timeout=3)

    def action_launch_normal(self):
        """Launch en modo normal"""
        self.notify("üöÄ Lanzando Sentinel en modo NORMAL...")
        self._launch_sentinel_app(mode="normal")

    def action_launch_debug(self):
        """Launch en modo debug"""
        self.notify("üêõ Lanzando Sentinel en modo DEBUG...")
        self._launch_sentinel_app(mode="debug")

    def action_launch_console(self):
        """Launch en modo console"""
        self.notify("üíª Lanzando Sentinel en modo CONSOLE...")
        self._launch_sentinel_app(mode="console")

    def action_run_diagnostics(self):
        """Ejecutar diagn√≥sticos del sistema"""
        self.notify("üîç Ejecutando diagn√≥sticos del sistema...")
        self.run_system_diagnostics()
        self.notify("‚úÖ Diagn√≥sticos completados", timeout=2)

    def action_screenshot(self):
        """Capturar screenshot del sistema"""
        if not self.debug_config['screenshot_enabled']:
            self.notify("‚ùå Screenshots deshabilitados", timeout=2)
            return

        try:
            # üì∏ Generar nombre de screenshot
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = project_root / f"debug_screenshot_{timestamp}.svg"

            # üéØ Capturar screenshot (simulado - Textual no tiene screenshot nativo)
            self._capture_debug_screenshot(screenshot_path)

            self.notify(f"üì∏ Screenshot capturado: {screenshot_path.name}", timeout=3)
        except Exception as e:
            self.notify(f"‚ùå Error capturando screenshot: {e}", timeout=3)

    def action_view_logs(self):
        """Ver logs recientes del sistema"""
        self.notify("üìã Mostrando logs recientes...")
        # TODO: Implementar viewer de logs en nueva ventana
        self.notify("üìã Feature en desarrollo - usar archivos de log directamente", timeout=3)

    def _launch_sentinel_app(self, mode: str = "normal"):
        """Lanza la aplicaci√≥n Sentinel con configuraci√≥n espec√≠fica"""
        try:
            # üîß Configurar ambiente seg√∫n modo
            if mode == "debug":
                os.environ['TEXTUAL_DEBUG'] = '1'
                os.environ['TEXTUAL_LOG'] = '1'
                os.environ['SENTINEL_DEBUG'] = '1'
            elif mode == "console":
                os.environ['TEXTUAL_CONSOLE'] = '1'

            # üöÄ Cerrar launcher y lanzar app principal
            self.notify(f"üéØ Iniciando Sentinel Dashboard en modo {mode.upper()}...", timeout=2)

            # üîÑ Peque√±a pausa para que se vea la notificaci√≥n
            import time
            time.sleep(1)

            # üöÄ Exit launcher y launch main app
            self.exit()

            # üéØ Launch main app
            app = SentinelDashboard()

            # üîß Configurar app seg√∫n modo
            if mode == "debug":
                app.debug_mode = True
            elif mode == "console":
                app.console = self.console

            app.run()

        except Exception as e:
            self.notify(f"‚ùå Error lanzando aplicaci√≥n: {e}", timeout=5)
            enviar_senal_log("ERROR", f"Error lanzando aplicaci√≥n: {e}", __name__, "debug")

    def _capture_debug_screenshot(self, path: Path):
        """Captura screenshot de debug (simulado)"""
        # üéØ En una implementaci√≥n real, usar√≠amos la funcionalidad de screenshot de Textual
        # Por ahora, guardamos informaci√≥n de debug

        debug_info = {
            'timestamp': datetime.now().isoformat(),
            'system_diagnostics': self.system_diagnostics,
            'debug_config': self.debug_config,
            'devtools_active': self.devtools_active,
            'environment_vars': {
                'TEXTUAL_DEBUG': os.environ.get('TEXTUAL_DEBUG'),
                'TEXTUAL_LOG': os.environ.get('TEXTUAL_LOG'),
                'SENTINEL_DEBUG': os.environ.get('SENTINEL_DEBUG')
            }
        }

        # üíæ Guardar informaci√≥n de debug
        debug_path = path.with_suffix('.json')
        with open(debug_path, 'w', encoding='utf-8') as f:
            json.dump(debug_info, f, indent=2, ensure_ascii=False)


def main():
    """Funci√≥n principal del debug launcher"""
    parser = argparse.ArgumentParser(description="Sentinel Debug Launcher")
    parser.add_argument("--mode", choices=["launcher", "normal", "debug", "console"],
                       default="launcher", help="Launch mode")
    parser.add_argument("--devtools", action="store_true", help="Enable DevTools")
    parser.add_argument("--diagnostics", action="store_true", help="Run diagnostics only")

    args = parser.parse_args()

    # üîß Configurar ambiente seg√∫n argumentos
    if args.devtools:
        os.environ['TEXTUAL_DEBUG'] = '1'
        os.environ['TEXTUAL_LOG'] = '1'

    # üîç Solo ejecutar diagn√≥sticos
    if args.diagnostics:
        enviar_senal_log("INFO", "Ejecutando diagn√≥sticos del sistema...", __name__, "debug")
        launcher = DebugLauncher()
        launcher.run_system_diagnostics()
        enviar_senal_log("SUCCESS", "Diagn√≥sticos completados", __name__, "debug")
        return

    # üöÄ Launch seg√∫n modo
    if args.mode == "launcher":
        # üîß Mostrar launcher
        app = DebugLauncher()
        app.run()
    else:
        # üéØ Launch directo
        try:
            from dashboard.dashboard_definitivo import SentinelDashboardDefinitivo as SentinelDashboard

            if args.mode == "debug":
                os.environ['TEXTUAL_DEBUG'] = '1'
                os.environ['SENTINEL_DEBUG'] = '1'
            elif args.mode == "console":
                os.environ['TEXTUAL_CONSOLE'] = '1'

            app = SentinelDashboard()
            app.run()

        except Exception as e:
            enviar_senal_log("ERROR", f"Error lanzando aplicaci√≥n: {e}", __name__, "debug")
            sys.exit(1)


if __name__ == "__main__":
    main()
